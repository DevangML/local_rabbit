[{"filePath":"/Users/devang/Documents/local_rabbit/client/src/config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/client/src/config/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/client/src/core/application/config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/client/src/core/application/useCases/ai/AnalyzeDiffWithAIUseCase.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/client/src/core/application/useCases/diff/AnalyzeDiffUseCase.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/client/src/core/application/useCases/diff/GetDiffUseCase.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/client/src/core/application/useCases/repository/GetBranchesUseCase.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/client/src/core/application/useCases/repository/GetRepositoriesUseCase.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/client/src/core/application/useCases/repository/SetCurrentRepositoryUseCase.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/client/src/core/domain/entities/Diff.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/client/src/core/domain/entities/Repository.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/client/src/core/domain/repositories/DiffRepository.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/client/src/core/domain/repositories/RepositoryRepository.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/client/src/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/client/src/infrastructure/api/apiClient.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/client/src/infrastructure/api/services/CodeReviewApiService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/client/src/infrastructure/api/services/DiffApiService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/client/src/infrastructure/di/container.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/client/src/infrastructure/query/queryClient.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/client/src/infrastructure/repositories/ApiDiffRepository.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/client/src/infrastructure/repositories/ApiRepositoryRepository.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/client/src/infrastructure/services/GeminiService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/client/src/main.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/client/src/presentation/hooks/useBranches.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/client/src/presentation/hooks/useDiff.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/client/src/presentation/hooks/useRepositories.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/client/src/reportWebVitals.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/client/src/services/StateManager.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/client/src/store/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/client/src/store/reducers/diffViewReducer.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/client/src/store/reducers/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/client/src/store/themeSlice.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/client/src/tests/mocks/DiffApiService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/client/src/tests/run-all-tests.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":33,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":33,"endColumn":12,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[868,928],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":34,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":34,"endColumn":12,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[929,1001],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":35,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":35,"endColumn":12,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1002,1072],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":49,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":49,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1341,1394],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":58,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":58,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1665,1700],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":59,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":59,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1705,1765],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":60,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":60,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1770,1826],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":61,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":61,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1831,1889],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":62,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":62,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1894,1944],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Test Runner Script\n * \n * This script runs all tests in the client directory with coverage reporting.\n * It can be executed with: node src/tests/run-all-tests.js\n */\n\nimport { execSync } from 'child_process';\nimport path from 'path';\nimport fs from 'fs';\nimport { fileURLToPath } from 'url';\n\n// Get current file directory in ESM\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Configuration\nconst config = {\n  testCommand: 'vitest run --coverage',\n  coverageDir: path.resolve(__dirname, '../../reports/coverage'),\n  testReportDir: path.resolve(__dirname, '../../reports/test-results'),\n  testTimeout: 60000, // 60 seconds\n};\n\n// Ensure directories exist\n[config.coverageDir, config.testReportDir].forEach(dir => {\n  if (!fs.existsSync(dir)) {\n    fs.mkdirSync(dir, { recursive: true });\n  }\n});\n\n// Run tests\nconsole.log('Running all tests with coverage reporting...');\nconsole.log(`Coverage reports will be saved to: ${config.coverageDir}`);\nconsole.log(`Test reports will be saved to: ${config.testReportDir}`);\n\ntry {\n  // Execute the test command\n  execSync(config.testCommand, {\n    stdio: 'inherit',\n    timeout: config.testTimeout,\n    env: {\n      ...process.env,\n      VITEST_COVERAGE_DIR: config.coverageDir,\n      VITEST_REPORT_DIR: config.testReportDir,\n    },\n  });\n\n  console.log('\\n✅ All tests completed successfully!');\n\n  // Generate summary\n  const coverageFiles = fs.readdirSync(config.coverageDir);\n  if (coverageFiles.includes('coverage-summary.json')) {\n    const summary = JSON.parse(\n      fs.readFileSync(path.join(config.coverageDir, 'coverage-summary.json'), 'utf8')\n    );\n\n    console.log('\\nCoverage Summary:');\n    console.log(`Statements: ${summary.total.statements.pct}%`);\n    console.log(`Branches: ${summary.total.branches.pct}%`);\n    console.log(`Functions: ${summary.total.functions.pct}%`);\n    console.log(`Lines: ${summary.total.lines.pct}%`);\n  }\n\n} catch (error) {\n  console.error('\\n❌ Test execution failed:');\n  console.error(error.message);\n  process.exit(1);\n} ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/client/src/tests/services/StateManager.test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/client/src/tests/setup.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/client/src/tests/store/themeSlice.test.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'configureStore' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { configureStore } from '@reduxjs/toolkit';\nimport themeReducer, { setTheme, toggleTheme } from '../../store/themeSlice';\nimport { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';\nimport { themes } from '../../themes';\n\n// Mock themes\nvi.mock('../../themes', () => ({\n  themes: {\n    'lunar-light': {\n      name: 'Lunar Light',\n      colors: {\n        bgPrimary: '#f1f5f9',\n        bgSecondary: '#ffffff',\n        textPrimary: '#24283b',\n        textSecondary: '#545c7e',\n      }\n    },\n    'lunar-dark': {\n      name: 'Lunar Dark',\n      colors: {\n        bgPrimary: '#1a1b26',\n        bgSecondary: '#24283b',\n        textPrimary: '#c0caf5',\n        textSecondary: '#9aa5ce',\n      }\n    }\n  }\n}));\n\ndescribe('Theme Slice', () => {\n  let mockLocalStorage;\n  let mockMatchMedia;\n\n  beforeEach(() => {\n    // Mock localStorage\n    mockLocalStorage = {\n      getItem: vi.fn(),\n      setItem: vi.fn(),\n      removeItem: vi.fn(),\n      clear: vi.fn()\n    };\n    Object.defineProperty(window, 'localStorage', {\n      value: mockLocalStorage,\n      writable: true\n    });\n\n    // Mock matchMedia\n    mockMatchMedia = vi.fn();\n    Object.defineProperty(window, 'matchMedia', {\n      value: mockMatchMedia,\n      writable: true\n    });\n  });\n\n  afterEach(() => {\n    vi.clearAllMocks();\n  });\n\n  it('should use the default light theme when no theme is saved', () => {\n    mockLocalStorage.getItem.mockReturnValue(null);\n    mockMatchMedia.mockReturnValue({ matches: false });\n\n    const initialState = themeReducer(undefined, { type: 'unknown' });\n    expect(initialState.currentTheme).toEqual(themes.find(t => t.name === 'lunar-light'));\n  });\n\n  it('should use the default dark theme when dark mode is preferred', () => {\n    mockLocalStorage.getItem.mockReturnValue(null);\n    mockMatchMedia.mockReturnValue({ matches: true });\n\n    const initialState = themeReducer(undefined, { type: 'unknown' });\n    expect(initialState.currentTheme).toEqual(themes.find(t => t.name === 'lunar-dark'));\n  });\n\n  it('should use the saved theme from localStorage if available', () => {\n    const savedTheme = themes.find(t => t.name === 'synthwave');\n    mockLocalStorage.getItem.mockReturnValue(JSON.stringify(savedTheme));\n\n    const initialState = themeReducer(undefined, { type: 'unknown' });\n    expect(initialState.currentTheme).toEqual(savedTheme);\n  });\n\n  it('should set a new theme', () => {\n    const newTheme = themes.find(t => t.name === 'synthwave');\n    const initialState = {\n      currentTheme: themes.find(t => t.name === 'lunar-light'),\n      availableThemes: themes\n    };\n\n    const nextState = themeReducer(initialState, setTheme(newTheme));\n    expect(nextState.currentTheme).toEqual(newTheme);\n    expect(mockLocalStorage.setItem).toHaveBeenCalledWith(\n      'theme',\n      JSON.stringify(newTheme)\n    );\n  });\n\n  it('should not change state for invalid theme', () => {\n    const initialState = {\n      currentTheme: themes.find(t => t.name === 'lunar-light'),\n      availableThemes: themes\n    };\n\n    const invalidTheme = { name: 'invalid', colors: {} };\n    const nextState = themeReducer(initialState, setTheme(invalidTheme));\n    expect(nextState).toEqual(initialState);\n  });\n\n  it('should toggle from light to dark theme', () => {\n    const lightTheme = themes.find(t => t.name === 'lunar-light');\n    const darkTheme = themes.find(t => t.name === 'lunar-dark');\n    const initialState = {\n      currentTheme: lightTheme,\n      availableThemes: themes\n    };\n\n    const nextState = themeReducer(initialState, toggleTheme());\n    expect(nextState.currentTheme).toEqual(darkTheme);\n  });\n\n  it('should toggle from dark to light theme', () => {\n    const lightTheme = themes.find(t => t.name === 'lunar-light');\n    const darkTheme = themes.find(t => t.name === 'lunar-dark');\n    const initialState = {\n      currentTheme: darkTheme,\n      availableThemes: themes\n    };\n\n    const nextState = themeReducer(initialState, toggleTheme());\n    expect(nextState.currentTheme).toEqual(lightTheme);\n  });\n\n  it('should include all available themes in the initial state', () => {\n    const initialState = themeReducer(undefined, { type: 'unknown' });\n    expect(initialState.availableThemes).toEqual(themes);\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/client/src/tests/utils/cache.test.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":20,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":20,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'cacheInstance2' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":162,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":162,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';\nimport { cacheInstance, CACHE_TYPES, Cache } from '../../utils/cache';\n\ndescribe('Cache Utility', () => {\n  beforeEach(() => {\n    // Clear the cache before each test\n    cacheInstance.clear();\n\n    // Mock localStorage\n    const localStorageMock = {\n      getItem: vi.fn(),\n      setItem: vi.fn(),\n      removeItem: vi.fn(),\n      clear: vi.fn()\n    };\n    Object.defineProperty(window, 'localStorage', { value: localStorageMock });\n\n    // Mock console methods\n    console.error = vi.fn();\n    console.log = vi.fn();\n\n    // Reset time mocks\n    vi.restoreAllMocks();\n  });\n\n  afterEach(() => {\n    vi.clearAllMocks();\n  });\n\n  it('should set and get data from cache', () => {\n    const testType = CACHE_TYPES.DIFF;\n    const testParams = { id: 1, name: 'test' };\n    const testData = { result: 'test data' };\n\n    cacheInstance.set(testType, testParams, testData);\n    const cachedData = cacheInstance.get(testType, testParams);\n\n    expect(cachedData).toEqual(testData);\n    expect(localStorage.setItem).toHaveBeenCalled();\n  });\n\n  it('should return null for non-existent cache entries', () => {\n    const result = cacheInstance.get('nonexistent', { id: 999 });\n    expect(result).toBeNull();\n  });\n\n  it('should clear the entire cache', () => {\n    // Add some data to the cache\n    cacheInstance.set(CACHE_TYPES.DIFF, { id: 1 }, { data: 'test1' });\n    cacheInstance.set(CACHE_TYPES.IMPACT, { id: 2 }, { data: 'test2' });\n\n    // Clear the cache\n    cacheInstance.clear();\n\n    // Verify cache is empty\n    expect(cacheInstance.get(CACHE_TYPES.DIFF, { id: 1 })).toBeNull();\n    expect(cacheInstance.get(CACHE_TYPES.IMPACT, { id: 2 })).toBeNull();\n    expect(localStorage.removeItem).toHaveBeenCalledWith('app_cache');\n    expect(localStorage.setItem).toHaveBeenCalledWith('cache_cleared', expect.any(String));\n  });\n\n  it('should clear cache by type', () => {\n    // Add data of different types\n    cacheInstance.set(CACHE_TYPES.DIFF, { id: 1 }, { data: 'diff1' });\n    cacheInstance.set(CACHE_TYPES.DIFF, { id: 2 }, { data: 'diff2' });\n    cacheInstance.set(CACHE_TYPES.IMPACT, { id: 1 }, { data: 'impact1' });\n\n    // Clear only DIFF type\n    cacheInstance.clearType(CACHE_TYPES.DIFF);\n\n    // Verify DIFF cache is cleared but IMPACT remains\n    expect(cacheInstance.get(CACHE_TYPES.DIFF, { id: 1 })).toBeNull();\n    expect(cacheInstance.get(CACHE_TYPES.DIFF, { id: 2 })).toBeNull();\n    expect(cacheInstance.get(CACHE_TYPES.IMPACT, { id: 1 })).toEqual({ data: 'impact1' });\n  });\n\n  it('should expire cache entries after the expiry time', async () => {\n    // Mock Date.now to control time\n    const now = Date.now();\n    vi.spyOn(Date, 'now')\n      .mockImplementationOnce(() => now) // For setting the cache\n      .mockImplementationOnce(() => now + 6 * 60 * 1000); // For getting (after expiry)\n\n    cacheInstance.set(CACHE_TYPES.DIFF, { id: 1 }, { data: 'test' });\n\n    // Get after expiry time\n    const result = cacheInstance.get(CACHE_TYPES.DIFF, { id: 1 });\n\n    expect(result).toBeNull();\n  });\n\n  it('should not expire cache entries before the expiry time', () => {\n    // Mock Date.now to control time\n    const now = Date.now();\n    vi.spyOn(Date, 'now')\n      .mockImplementationOnce(() => now) // For setting the cache\n      .mockImplementationOnce(() => now + 4 * 60 * 1000); // For getting (before expiry)\n\n    cacheInstance.set(CACHE_TYPES.DIFF, { id: 1 }, { data: 'test' });\n\n    // Get before expiry time\n    const result = cacheInstance.get(CACHE_TYPES.DIFF, { id: 1 });\n\n    expect(result).toEqual({ data: 'test' });\n  });\n\n  it('should fetch and cache data with getOrFetch', async () => {\n    const testType = CACHE_TYPES.REVIEW;\n    const testParams = { id: 3 };\n    const testData = { result: 'fetched data' };\n\n    const fetchFn = vi.fn().mockResolvedValue(testData);\n\n    // First call should fetch\n    const result1 = await cacheInstance.getOrFetch(testType, testParams, fetchFn);\n\n    expect(fetchFn).toHaveBeenCalledTimes(1);\n    expect(result1).toEqual(testData);\n\n    // Second call should use cache\n    const result2 = await cacheInstance.getOrFetch(testType, testParams, fetchFn);\n\n    expect(fetchFn).toHaveBeenCalledTimes(1); // Still only called once\n    expect(result2).toEqual(testData);\n  });\n\n  it('should handle errors in getOrFetch', async () => {\n    const testError = new Error('Fetch failed');\n    const fetchFn = vi.fn().mockRejectedValue(testError);\n\n    await expect(\n      cacheInstance.getOrFetch(CACHE_TYPES.QUALITY, { id: 4 }, fetchFn)\n    ).rejects.toThrow(testError);\n\n    expect(console.error).toHaveBeenCalled();\n  });\n\n  it('should generate consistent cache keys', () => {\n    const type = CACHE_TYPES.DIFF;\n    const params1 = { a: 1, b: 2 };\n    const params2 = { b: 2, a: 1 }; // Same properties but different order\n\n    const key1 = cacheInstance.generateKey(type, params1);\n    const key2 = cacheInstance.generateKey(type, params2);\n\n    // Keys should be the same regardless of property order\n    expect(key1).toEqual(key2);\n  });\n\n  it('should initialize from localStorage on construction', async () => {\n    const cachedData = {\n      'diff:{\"id\":1}': { data: { result: 'cached' }, timestamp: Date.now() }\n    };\n\n    // Set up localStorage mock to return our test data\n    localStorage.getItem.mockReturnValueOnce(JSON.stringify(cachedData));\n\n    // Reset the cacheInstance to trigger initialization\n    cacheInstance.clear();\n\n    // Create a new instance to trigger initialization\n    const cacheInstance2 = new Cache();\n\n    // Verify localStorage was accessed\n    expect(localStorage.getItem).toHaveBeenCalledWith('app_cache');\n  });\n\n  it('should handle localStorage errors gracefully', () => {\n    // Mock localStorage.getItem to throw an error\n    localStorage.getItem.mockImplementationOnce(() => {\n      throw new Error('localStorage error');\n    });\n\n    // This should not throw\n    cacheInstance.initializeFromLocalStorage();\n\n    expect(console.error).toHaveBeenCalled();\n    expect(localStorage.removeItem).toHaveBeenCalledWith('app_cache');\n  });\n}); ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/client/src/tests/utils/logger.test.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":12,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":12,"endColumn":18},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":77,"column":12,"nodeType":"MemberExpression","messageId":"unexpected","endLine":77,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, test, expect, vi, beforeEach, afterEach } from 'vitest';\nimport { Logger } from '../../utils/logger';\n\ndescribe('Logger Utility', () => {\n  let originalStack;\n\n  beforeEach(() => {\n    // Mock console methods\n    console.error = vi.fn();\n    console.warn = vi.fn();\n    console.info = vi.fn();\n    console.debug = vi.fn();\n\n    // Store original stack getter\n    originalStack = Object.getOwnPropertyDescriptor(Error.prototype, 'stack');\n\n    // Mock stack trace\n    const mockStack = `Error: test error\n    at Object.<anonymous> (src/tests/utils/logger.test.js:10:20)\n    at Object.asyncJestTest (/path/to/project/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:100:37)`;\n\n    // Mock Error.stack\n    Object.defineProperty(Error.prototype, 'stack', {\n      get: () => mockStack,\n      configurable: true\n    });\n  });\n\n  afterEach(() => {\n    vi.clearAllMocks();\n\n    // Restore original stack getter\n    if (originalStack) {\n      Object.defineProperty(Error.prototype, 'stack', originalStack);\n    }\n  });\n\n  test('should format message with correct level and location', () => {\n    const message = Logger.formatMessage('error', 'test message');\n    expect(message).toContain('logger.test.js');\n    expect(message).toContain('test message');\n  });\n\n  test('should include metadata in formatted message', () => {\n    const metadata = { key: 'value' };\n    const message = Logger.formatMessage('error', 'test message', metadata);\n    expect(message).toContain(JSON.stringify(metadata));\n  });\n\n  test('should handle missing stack trace information', () => {\n    // Mock stack without file information\n    Object.defineProperty(Error.prototype, 'stack', {\n      get: () => 'Error: test error',\n      configurable: true\n    });\n    const message = Logger.formatMessage('error', 'test message');\n    expect(message).toContain('unknown:0:0');\n  });\n\n  test('should log error messages', () => {\n    Logger.error('test error');\n    expect(console.error).toHaveBeenCalledWith(expect.stringContaining('test error'));\n  });\n\n  test('should log warning messages', () => {\n    Logger.warn('test warning');\n    expect(console.warn).toHaveBeenCalledWith(expect.stringContaining('test warning'));\n  });\n\n  test('should log info messages', () => {\n    Logger.info('test info');\n    expect(console.info).toHaveBeenCalledWith(expect.stringContaining('test info'));\n  });\n\n  test('should log debug messages', () => {\n    Logger.debug('test debug');\n    expect(console.debug).toHaveBeenCalledWith(expect.stringContaining('test debug'));\n  });\n\n  test('should log error messages with metadata', () => {\n    const metadata = { key: 'value' };\n    Logger.error('test error', metadata);\n    expect(console.error).toHaveBeenCalledWith(expect.stringContaining(JSON.stringify(metadata)));\n  });\n\n  test('should extract relative file path from stack trace', () => {\n    const message = Logger.formatMessage('error', 'test message');\n    expect(message).toContain('logger.test.js');\n  });\n\n  test('should handle stack traces without src directory', () => {\n    Object.defineProperty(Error.prototype, 'stack', {\n      get: () => 'Error: test error\\n    at Object.<anonymous> (file.js:10:20)',\n      configurable: true\n    });\n    const message = Logger.formatMessage('error', 'test message');\n    expect(message).toContain('file.js');\n  });\n}); ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/client/src/theme/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/client/src/theme/lunarTheme.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/client/src/themes/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/client/src/utils/cache.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":28,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":28,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[857,908],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":124,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":124,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3402,3431],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":145,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":145,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3837,3874],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":149,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":149,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3917,3973],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const CACHE_EXPIRY = 5 * 60 * 1000; // 5 minutes in milliseconds\n\nclass Cache {\n  constructor() {\n    this.cache = new Map();\n    this.initializeFromLocalStorage();\n\n    // Set up event listener for storage changes in other tabs\n    if (typeof window !== 'undefined' && window.addEventListener) {\n      window.addEventListener('storage', (event) => {\n        if (event.key === 'cache_cleared') {\n          this.clear(false); // Clear without triggering another event\n        }\n      });\n    }\n  }\n\n  initializeFromLocalStorage() {\n    try {\n      if (typeof localStorage === 'undefined') return;\n\n      const persistedCache = localStorage.getItem('app_cache');\n      if (persistedCache) {\n        const parsed = JSON.parse(persistedCache);\n        Object.entries(parsed).forEach(([key, value]) => {\n          this.cache.set(key, value);\n        });\n        console.log('Cache initialized from localStorage');\n      }\n    } catch (error) {\n      console.error('Failed to initialize cache from localStorage:', error);\n      try {\n        if (typeof localStorage !== 'undefined') {\n          localStorage.removeItem('app_cache');\n        }\n      } catch (e) {\n        // Ignore errors when removing from localStorage\n      }\n    }\n  }\n\n  persistToLocalStorage() {\n    try {\n      if (typeof localStorage === 'undefined') return;\n\n      const cacheObj = {};\n      this.cache.forEach((value, key) => {\n        cacheObj[key] = value;\n      });\n      localStorage.setItem('app_cache', JSON.stringify(cacheObj));\n    } catch (error) {\n      console.error('Failed to persist cache to localStorage:', error);\n    }\n  }\n\n  generateKey(type, params) {\n    // Sort keys to ensure consistent key generation regardless of property order\n    const sortedParams = this.sortObjectKeys(params);\n    return `${type}:${JSON.stringify(sortedParams)}`;\n  }\n\n  sortObjectKeys(obj) {\n    if (obj === null || typeof obj !== 'object' || Array.isArray(obj)) {\n      return obj;\n    }\n\n    // Create a new object with sorted keys\n    return Object.keys(obj).sort().reduce((result, key) => {\n      result[key] = this.sortObjectKeys(obj[key]); // Recursively sort nested objects\n      return result;\n    }, {});\n  }\n\n  set(type, params, data) {\n    try {\n      const key = this.generateKey(type, params);\n      this.cache.set(key, {\n        data,\n        timestamp: Date.now()\n      });\n      this.persistToLocalStorage();\n    } catch (error) {\n      console.error('Error setting cache:', error);\n    }\n  }\n\n  get(type, params) {\n    try {\n      const key = this.generateKey(type, params);\n      const cached = this.cache.get(key);\n\n      if (!cached) return null;\n\n      // Check if cache has expired\n      if (Date.now() - cached.timestamp > CACHE_EXPIRY) {\n        this.cache.delete(key);\n        this.persistToLocalStorage();\n        return null;\n      }\n\n      return cached.data;\n    } catch (error) {\n      console.error('Error getting from cache:', error);\n      return null;\n    }\n  }\n\n  clear(triggerEvent = true) {\n    this.cache.clear();\n\n    try {\n      if (typeof localStorage !== 'undefined') {\n        localStorage.removeItem('app_cache');\n\n        if (triggerEvent) {\n          // Notify other tabs that cache was cleared\n          localStorage.setItem('cache_cleared', Date.now().toString());\n        }\n      }\n    } catch (error) {\n      console.error('Error clearing cache from localStorage:', error);\n    }\n\n    console.log('Cache cleared');\n  }\n\n  clearType(type) {\n    let deleted = false;\n    for (const key of this.cache.keys()) {\n      if (key.startsWith(`${type}:`)) {\n        this.cache.delete(key);\n        deleted = true;\n      }\n    }\n\n    if (deleted) {\n      this.persistToLocalStorage();\n    }\n  }\n\n  async getOrFetch(type, params, fetchFn) {\n    try {\n      const cachedData = this.get(type, params);\n      if (cachedData) {\n        console.log(`Cache hit for ${type}`);\n        return cachedData;\n      }\n\n      console.log(`Cache miss for ${type}, fetching data...`);\n      const data = await fetchFn();\n      this.set(type, params, data);\n      return data;\n    } catch (error) {\n      console.error(`Error in getOrFetch for ${type}:`, error);\n      throw error;\n    }\n  }\n}\n\nexport const cacheInstance = new Cache();\n\nexport const CACHE_TYPES = {\n  DIFF: 'diff',\n  IMPACT: 'impact',\n  QUALITY: 'quality',\n  REVIEW: 'review'\n};\n\nexport { Cache }; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/client/src/utils/diffParser.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/client/src/utils/logger.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":67,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":67,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[2161,2223],"text":""},"desc":"Remove the console.debug()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Logger utility for consistent logging across the application\n */\nexport class Logger {\n  /**\n   * Format a log message with location and metadata\n   * @param {string} level - Log level (error, warn, info, debug)\n   * @param {string} message - Message to log\n   * @param {Object} [metadata] - Optional metadata to include\n   * @returns {string} - Formatted message\n   */\n  static formatMessage(level, message, metadata = null) {\n    const error = new Error();\n    const stackLines = error.stack.split('\\n');\n    let location = 'unknown:0:0';\n\n    // Find the first line that's not from this file\n    for (const line of stackLines) {\n      if (line.includes('at ') && !line.includes('logger.js')) {\n        const match = line.match(/\\((.*?):(\\d+):(\\d+)\\)/) || line.match(/at (.*?):(\\d+):(\\d+)/);\n        if (match) {\n          const [, file, lineNum, colNum] = match;\n          const srcIndex = file.indexOf('src/');\n          location = srcIndex >= 0 ? file.slice(srcIndex) : `${file}:${lineNum}:${colNum}`;\n          break;\n        }\n      }\n    }\n\n    const formattedMessage = `[${level.toUpperCase()}] [${location}] ${message}`;\n    return metadata ? `${formattedMessage} ${JSON.stringify(metadata)}` : formattedMessage;\n  }\n\n  /**\n   * Log an error message\n   * @param {string} message - Error message\n   * @param {Object} [metadata] - Optional metadata\n   */\n  static error(message, metadata = null) {\n    console.error(this.formatMessage('error', message, metadata));\n  }\n\n  /**\n   * Log a warning message\n   * @param {string} message - Warning message\n   * @param {Object} [metadata] - Optional metadata\n   */\n  static warn(message, metadata = null) {\n    console.warn(this.formatMessage('warn', message, metadata));\n  }\n\n  /**\n   * Log an info message\n   * @param {string} message - Info message\n   * @param {Object} [metadata] - Optional metadata\n   */\n  static info(message, metadata = null) {\n    console.info(this.formatMessage('info', message, metadata));\n  }\n\n  /**\n   * Log a debug message\n   * @param {string} message - Debug message\n   * @param {Object} [metadata] - Optional metadata\n   */\n  static debug(message, metadata = null) {\n    console.debug(this.formatMessage('debug', message, metadata));\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]}]
