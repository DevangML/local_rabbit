{"version":3,"file":"AIAnalyzer-rBlCNBJQ.js","sources":["../../../../node_modules/@mui/icons-material/esm/AutoFixHigh.js","../../src/components/AIAnalyzer/AIAnalyzer.jsx"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M7.5 5.6 10 7 8.6 4.5 10 2 7.5 3.4 5 2l1.4 2.5L5 7zm12 9.8L17 14l1.4 2.5L17 19l2.5-1.4L22 19l-1.4-2.5L22 14zM22 2l-2.5 1.4L17 2l1.4 2.5L17 7l2.5-1.4L22 7l-1.4-2.5zm-7.63 5.29a.9959.9959 0 0 0-1.41 0L1.29 18.96c-.39.39-.39 1.02 0 1.41l2.34 2.34c.39.39 1.02.39 1.41 0L16.7 11.05c.39-.39.39-1.02 0-1.41zm-1.03 5.49-2.12-2.12 2.44-2.44 2.12 2.12z\"\n}), 'AutoFixHigh');","/* global console */\n/* global fetch */\n/* global console */\n/* global fetch */\n/* global console */\n/* global fetch */\nimport React, { useState } from \"react\";\nimport {\n  Box,\n  Container,\n  Typography,\n  Paper,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Button,\n  CircularProgress,\n  Alert,\n  TextField,\n} from \"@mui/material\";\nimport { AutoFixHigh as AIIcon } from \"@mui/icons-material\";\n\nconst AIAnalyzer = ({\n  fromBranch,\n  toBranch,\n  branches,\n  onFromBranchChange,\n  onToBranchChange,\n  isLoadingBranches,\n  repoPath,\n}) => {\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const [analysis, setAnalysis] = useState(null);\n  const [error, setError] = useState(null);\n  const [prompt, setPrompt] = useState(\"\");\n\n  const handleAnalyze = async () => {\n    if (!repoPath) {\n      setError(\"Please select a repository first\");\n      return;\n    }\n\n    if (!fromBranch || !toBranch) {\n      setError(\"Please select both branches to analyze\");\n      return;\n    }\n\n    setIsAnalyzing(true);\n    setError(null);\n\n    try {\n      const response = await fetch(\"/api/code-review/analyze\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          repoPath,\n          baseBranch: fromBranch,\n          headBranch: toBranch,\n          prompt: prompt.trim(),\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to analyze changes\");\n      }\n\n      const data = await response.json();\n      setAnalysis(data);\n    } catch (err) {\n      console.error(\"Error analyzing changes:\", err);\n      setError(err.message);\n    } finally {\n      setIsAnalyzing(false);\n    }\n  };\n\n  return (\n    <Container maxWidth=\"xl\">\n      <Box sx={{ mb: 4 }}>\n        <Typography variant=\"h5\" sx={{ mb: 3, display: \"flex\", alignItems: \"center\", gap: 1 }}>\n          <AIIcon color=\"primary\" />\n          AI Analysis\n        </Typography>\n        <Box sx={{ display: \"flex\", gap: 2, mb: 3 }}>\n          <FormControl sx={{ minWidth: 200 }}>\n            <InputLabel>From Branch</InputLabel>\n            <Select\n              value={fromBranch}\n              label=\"From Branch\"\n              onChange={(e) => onFromBranchChange(e.target.value)}\n              disabled={isLoadingBranches || !repoPath || branches.length === 0}\n            >\n              {branches.map((branch) => (\n                <MenuItem key={branch} value={branch}>\n                  {branch}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n          <FormControl sx={{ minWidth: 200 }}>\n            <InputLabel>To Branch</InputLabel>\n            <Select\n              value={toBranch}\n              label=\"To Branch\"\n              onChange={(e) => onToBranchChange(e.target.value)}\n              disabled={isLoadingBranches || !repoPath || branches.length === 0}\n            >\n              {branches.map((branch) => (\n                <MenuItem key={branch} value={branch}>\n                  {branch}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </Box>\n\n        <Box sx={{ mb: 3 }}>\n          <Typography variant=\"subtitle1\" gutterBottom>\n            Custom Instructions for AI Analysis\n          </Typography>\n          <TextField\n            id=\"ai-prompt\"\n            multiline\n            rows={3}\n            value={prompt}\n            onChange={(e) => setPrompt(e.target.value)}\n            placeholder=\"Enter specific instructions for the AI analysis (e.g., 'Focus on security issues' or 'Explain the changes in simple terms')\"\n            disabled={isAnalyzing}\n            fullWidth\n            variant=\"outlined\"\n            sx={{ backgroundColor: \"background.paper\" }}\n          />\n        </Box>\n\n        <Box sx={{ display: \"flex\", justifyContent: \"flex-start\" }}>\n          <Button\n            variant=\"contained\"\n            onClick={handleAnalyze}\n            disabled={!repoPath || !fromBranch || !toBranch || Boolean(Boolean(isAnalyzing)) || Boolean(Boolean(isLoadingBranches))}\n            startIcon={<AIIcon />}\n          >\n            {isAnalyzing ? \"Analyzing...\" : \"Analyze Changes\"}\n          </Button>\n        </Box>\n      </Box>\n\n      {isLoadingBranches ? (\n        <Box\n          sx={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            gap: 2,\n            py: 8,\n          }}\n        >\n          <CircularProgress />\n          <Typography color=\"text.secondary\">\n            Loading branches...\n          </Typography>\n        </Box>\n      ) : !repoPath ? (\n        <Paper\n          sx={{\n            p: 3,\n            textAlign: \"center\",\n            color: \"text.secondary\",\n            border: \"1px dashed\",\n            borderColor: \"divider\",\n          }}\n        >\n          Please select a repository to begin\n        </Paper>\n      ) : isAnalyzing ? (\n        <Box\n          sx={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            gap: 2,\n            py: 8,\n          }}\n        >\n          <CircularProgress />\n          <Typography color=\"text.secondary\">\n            Analyzing changes using AI...\n          </Typography>\n        </Box>\n      ) : error ? (\n        <Alert severity=\"error\" sx={{ mb: 3 }}>\n          {error}\n        </Alert>\n      ) : !analysis ? (\n        <Paper\n          sx={{\n            p: 3,\n            textAlign: \"center\",\n            color: \"text.secondary\",\n            border: \"1px dashed\",\n            borderColor: \"divider\",\n          }}\n        >\n          Select branches and click Analyze to get AI-powered insights\n        </Paper>\n      ) : (\n        <Box sx={{ display: \"flex\", flexDirection: \"column\", gap: 3 }}>\n          { /* Analysis Results */}\n          <Paper sx={{ p: 3 }}>\n            <Typography variant=\"h6\" gutterBottom>\n              Summary\n            </Typography>\n            <Typography color=\"text.secondary\">\n              {analysis.summary}\n            </Typography>\n          </Paper>\n\n          { /* Suggestions */}\n          {analysis.suggestions?.length > 0 && (\n            <Paper sx={{ p: 3 }}>\n              <Typography variant=\"h6\" gutterBottom>\n                Suggestions\n              </Typography>\n              <Box component=\"ul\" sx={{ mt: 2, pl: 2 }}>\n                {analysis.suggestions.map((suggestion, index) => (\n                  <Typography\n                    key={index}\n                    component=\"li\"\n                    color=\"text.secondary\"\n                    sx={{ mb: 1 }}\n                  >\n                    {suggestion}\n                  </Typography>\n                ))}\n              </Box>\n            </Paper>\n          )}\n\n          { /* Code Quality Insights */}\n          {analysis.codeQuality && (\n            <Paper sx={{ p: 3 }}>\n              <Typography variant=\"h6\" gutterBottom>\n                Code Quality Insights\n              </Typography>\n              <Box sx={{ mt: 2 }}>\n                {Object.entries(analysis.codeQuality).map(([key, value]) => (\n                  <Box key={key} sx={{ mb: 2 }}>\n                    <Typography variant=\"subtitle2\" gutterBottom>\n                      {key}\n                    </Typography>\n                    <Typography color=\"text.secondary\">\n                      {value}\n                    </Typography>\n                  </Box>\n                ))}\n              </Box>\n            </Paper>\n          )}\n        </Box>\n      )}\n    </Container>\n  );\n};\n\nexport default AIAnalyzer;"],"names":["AIIcon","createSvgIcon","_jsx","AIAnalyzer","fromBranch","toBranch","branches","onFromBranchChange","onToBranchChange","isLoadingBranches","repoPath","isAnalyzing","setIsAnalyzing","useState","analysis","setAnalysis","error","setError","prompt","setPrompt","handleAnalyze","response","data","err","jsxDEV","Container","Box","Typography","this","FormControl","InputLabel","Select","e","branch","MenuItem","TextField","Button","CircularProgress","Alert","Paper","suggestion","index","key","value"],"mappings":"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","x_google_ignoreList":[0]}