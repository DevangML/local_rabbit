[{"filePath":"/Users/devang/Documents/local_rabbit/server/.eslintrc.js","messages":[{"ruleId":"max-len","severity":2,"message":"This line has a length of 106. Maximum allowed is 100.","line":20,"column":1,"nodeType":"Program","messageId":"max","endLine":20,"endColumn":107}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"module.exports = {\n  env: {\n    node: true,\n    es2021: true,\n    jest: true,\n  },\n  extends: [\n    'airbnb-base',\n    'plugin:node/recommended',\n    'plugin:promise/recommended',\n  ],\n  plugins: [\n    'security',\n  ],\n  parserOptions: {\n    ecmaVersion: 2021,\n  },\n  rules: {\n    'no-console': ['error', { allow: ['warn', 'error', 'info'] }],\n    'import/no-extraneous-dependencies': ['error', { devDependencies: ['**/*.test.js', '**/*.spec.js'] }],\n    'node/no-unsupported-features/es-syntax': ['error', { ignores: ['modules'] }],\n    'max-len': ['error', { code: 100, ignoreComments: true, ignoreUrls: true }],\n    'no-unused-vars': ['error', { argsIgnorePattern: '^_' }],\n    'no-param-reassign': ['error', { props: false }],\n    'promise/always-return': 'warn',\n    'promise/catch-or-return': 'error',\n    'node/no-unpublished-require': 'off',\n    'comma-dangle': ['error', 'always-multiline'],\n    'arrow-parens': ['error', 'always'],\n    'arrow-body-style': ['error', 'as-needed'],\n    'prefer-destructuring': 'error',\n    'no-use-before-define': ['error', { functions: false, classes: true }],\n    'object-curly-spacing': ['error', 'always'],\n    'eol-last': ['error', 'always'],\n    'no-multiple-empty-lines': ['error', { max: 1, maxEOF: 1 }],\n    quotes: ['error', 'single', { avoidEscape: true }],\n    semi: ['error', 'always'],\n\n    // Security rules\n    'security/detect-buffer-noassert': 'error',\n    'security/detect-child-process': 'error',\n    'security/detect-disable-mustache-escape': 'error',\n    'security/detect-eval-with-expression': 'error',\n    'security/detect-new-buffer': 'error',\n    'security/detect-no-csrf-before-method-override': 'error',\n    'security/detect-non-literal-fs-filename': 'warn',\n    'security/detect-non-literal-regexp': 'warn',\n    'security/detect-non-literal-require': 'warn',\n    'security/detect-object-injection': 'off',\n    'security/detect-possible-timing-attacks': 'error',\n    'security/detect-pseudoRandomBytes': 'error',\n    'security/detect-unsafe-regex': 'error',\n  },\n};\n","usedDeprecatedRules":[{"ruleId":"max-len","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/server/index.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'path' is assigned a value but never used.","line":4,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":11},{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module './routes'.","line":5,"column":24,"nodeType":"Literal","endLine":5,"endColumn":34},{"ruleId":"import/extensions","severity":2,"message":"Missing file extension for \"./routes\"","line":5,"column":24,"nodeType":"Literal","endLine":5,"endColumn":34},{"ruleId":"node/no-missing-require","severity":2,"message":"\"./routes\" is not found.","line":5,"column":24,"nodeType":"Literal","endLine":5,"endColumn":34},{"ruleId":"consistent-return","severity":2,"message":"Expected to return a value at the end of arrow function.","line":34,"column":31,"nodeType":"ArrowFunctionExpression","messageId":"missingReturn","endLine":34,"endColumn":33},{"ruleId":"no-unused-vars","severity":2,"message":"'next' is defined but never used. Allowed unused args must match /^_/u.","line":53,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":53,"endColumn":29},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":65,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":65,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1527,1573],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":70,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":70,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1664,1723],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const express = require('express');\nconst cors = require('cors');\nconst morgan = require('morgan');\nconst path = require('path');\nconst routes = require('./routes');\n\nconst app = express();\nconst PORT = process.env.PORT || 3001;\n\n// CORS configuration\nconst corsOptions = {\n  origin: ['http://localhost:3000', 'http://127.0.0.1:3000'],\n  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\n  allowedHeaders: ['Content-Type', 'Authorization'],\n  credentials: true,\n  optionsSuccessStatus: 200,\n};\n\n// Middleware\napp.use(cors(corsOptions));\n\n// Increase payload limit to 50mb\napp.use(express.json({\n  limit: '50mb',\n  type: ['application/json', 'text/plain'],\n}));\napp.use(express.urlencoded({\n  limit: '50mb',\n  extended: true,\n}));\napp.use(morgan('dev'));\n\n// Error handling for JSON parsing\napp.use((err, req, res, next) => {\n  if (err instanceof SyntaxError && err.status === 400 && 'body' in err) {\n    return res.status(400).json({\n      error: 'Invalid JSON',\n      details: err.message,\n    });\n  }\n  next();\n});\n\n// API Routes\napp.use('/api', routes);\n\n// Handle 404\napp.use((req, res) => {\n  res.status(404).json({ error: 'Not Found' });\n});\n\n// Global error handler\napp.use((err, req, res, next) => {\n  console.error('Global error:', err);\n  res.status(500).json({\n    error: 'Internal Server Error',\n    details: process.env.NODE_ENV === 'development' ? err.message : undefined,\n  });\n});\n\n// Function to try different ports\nconst startServer = (port) => {\n  try {\n    const server = app.listen(port, () => {\n      console.log(`Server running on port ${port}`);\n    });\n\n    server.on('error', (err) => {\n      if (err.code === 'EADDRINUSE') {\n        console.log(`Port ${port} is busy, trying ${port + 1}...`);\n        startServer(port + 1);\n      } else {\n        console.error('Server error:', err);\n      }\n    });\n  } catch (err) {\n    console.error('Failed to start server:', err);\n  }\n};\n\n// Start the server\nstartServer(PORT);\n","usedDeprecatedRules":[{"ruleId":"max-len","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/server/routes/projects.js","messages":[{"ruleId":"no-restricted-syntax","severity":2,"message":"iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.","line":26,"column":5,"nodeType":"ForOfStatement","messageId":"restrictedSyntax","endLine":60,"endColumn":6},{"ruleId":"no-await-in-loop","severity":2,"message":"Unexpected `await` inside a loop.","line":29,"column":9,"nodeType":"AwaitExpression","messageId":"unexpectedAwait","endLine":29,"endColumn":36},{"ruleId":"security/detect-non-literal-fs-filename","severity":1,"message":"Found stat from package \"fs\" with non literal argument at index 0","line":29,"column":15,"nodeType":"CallExpression","endLine":29,"endColumn":36},{"ruleId":"no-await-in-loop","severity":2,"message":"Unexpected `await` inside a loop.","line":32,"column":23,"nodeType":"AwaitExpression","messageId":"unexpectedAwait","endLine":32,"endColumn":78},{"ruleId":"security/detect-non-literal-fs-filename","severity":1,"message":"Found readdir from package \"fs\" with non literal argument at index 0","line":32,"column":29,"nodeType":"CallExpression","endLine":32,"endColumn":78},{"ruleId":"no-restricted-syntax","severity":2,"message":"iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.","line":38,"column":9,"nodeType":"ForOfStatement","messageId":"restrictedSyntax","endLine":56,"endColumn":10},{"ruleId":"no-await-in-loop","severity":2,"message":"Unexpected `await` inside a loop.","line":41,"column":13,"nodeType":"AwaitExpression","messageId":"unexpectedAwait","endLine":41,"endColumn":43},{"ruleId":"security/detect-non-literal-fs-filename","severity":1,"message":"Found stat from package \"fs\" with non literal argument at index 0","line":41,"column":19,"nodeType":"CallExpression","endLine":41,"endColumn":43},{"ruleId":"no-await-in-loop","severity":2,"message":"Unexpected `await` inside a loop.","line":45,"column":28,"nodeType":"AwaitExpression","messageId":"unexpectedAwait","endLine":45,"endColumn":51},{"ruleId":"consistent-return","severity":2,"message":"Expected to return a value at the end of async arrow function.","line":80,"column":53,"nodeType":"ArrowFunctionExpression","messageId":"missingReturn","endLine":80,"endColumn":55},{"ruleId":"consistent-return","severity":2,"message":"Expected to return a value at the end of async arrow function.","line":116,"column":57,"nodeType":"ArrowFunctionExpression","messageId":"missingReturn","endLine":116,"endColumn":59},{"ruleId":"consistent-return","severity":2,"message":"Expected to return a value at the end of async arrow function.","line":136,"column":43,"nodeType":"ArrowFunctionExpression","messageId":"missingReturn","endLine":136,"endColumn":45}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const express = require('express');\n\nconst router = express.Router();\nconst simpleGit = require('simple-git');\nconst path = require('path');\nconst fs = require('fs');\nconst os = require('os');\n\n// Store current project path\nlet currentProjectPath = '';\n\n// Helper function to find git repositories in common directories\nconst findGitRepositories = async () => {\n  try {\n    const homeDir = os.homedir();\n    const commonDirs = [\n      path.join(homeDir, 'Documents'),\n      path.join(homeDir, 'Projects'),\n      path.join(homeDir, 'Development'),\n      path.join(homeDir, 'Code'),\n      path.join(homeDir, 'Github'),\n    ];\n\n    const repositories = [];\n\n    for (const dir of commonDirs) {\n      try {\n        // Check if directory exists\n        await fs.promises.stat(dir);\n\n        // Get subdirectories\n        const items = await fs.promises.readdir(dir, { withFileTypes: true });\n        const subdirs = items\n          .filter((item) => item.isDirectory())\n          .map((item) => path.join(dir, item.name));\n\n        // Check each subdirectory for .git folder\n        for (const subdir of subdirs) {\n          try {\n            const gitDir = path.join(subdir, '.git');\n            await fs.promises.stat(gitDir);\n\n            // It's a git repository\n            const git = simpleGit(subdir);\n            const isRepo = await git.checkIsRepo();\n\n            if (isRepo) {\n              repositories.push({\n                path: subdir,\n                name: path.basename(subdir),\n              });\n            }\n          } catch (err) {\n            // Not a git repository, continue\n          }\n        }\n      } catch (err) {\n        // Directory doesn't exist, continue\n      }\n    }\n\n    return repositories;\n  } catch (error) {\n    console.error('Error finding repositories:', error);\n    return [];\n  }\n};\n\n// Get list of repositories\nrouter.get('/api/repositories', async (req, res) => {\n  try {\n    const repositories = await findGitRepositories();\n    res.json(repositories);\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// Set current repository\nrouter.post('/api/repository/set', async (req, res) => {\n  try {\n    const { path: repoPath } = req.body;\n\n    if (!repoPath) {\n      return res.status(400).json({ error: 'Repository path is required' });\n    }\n\n    // Verify it's a git repository\n    try {\n      const git = simpleGit(repoPath);\n      const isRepo = await git.checkIsRepo();\n\n      if (!isRepo) {\n        return res.status(400).json({ error: 'Not a valid git repository' });\n      }\n\n      // Get branches\n      const branches = await git.branchLocal();\n      currentProjectPath = repoPath;\n\n      res.json({\n        path: repoPath,\n        name: path.basename(repoPath),\n        branches: branches.all,\n        current: branches.current,\n      });\n    } catch (error) {\n      return res.status(400).json({ error: 'Invalid repository path' });\n    }\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// Get branches for current repository\nrouter.get('/api/repository/branches', async (req, res) => {\n  try {\n    if (!currentProjectPath) {\n      return res.status(400).json({ error: 'No repository selected' });\n    }\n\n    const git = simpleGit(currentProjectPath);\n    const branches = await git.branchLocal();\n\n    res.json({\n      repository: path.basename(currentProjectPath),\n      branches: branches.all,\n      current: branches.current,\n    });\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// Get diff between branches\nrouter.post('/api/diff', async (req, res) => {\n  try {\n    const { fromBranch, toBranch } = req.body;\n\n    if (!currentProjectPath) {\n      return res.status(400).json({ error: 'No repository selected' });\n    }\n\n    if (!fromBranch || !toBranch) {\n      return res.status(400).json({ error: 'Both branches must be specified' });\n    }\n\n    const git = simpleGit(currentProjectPath);\n    const diff = await git.diff([fromBranch, toBranch]);\n\n    res.json({\n      diff,\n      fromBranch,\n      toBranch,\n      repository: path.basename(currentProjectPath),\n    });\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\nmodule.exports = router;\n","usedDeprecatedRules":[{"ruleId":"max-len","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/server/scripts/lint.js","messages":[{"ruleId":"no-process-exit","severity":2,"message":"Don't use process.exit(); throw an error instead.","line":25,"column":3,"nodeType":"CallExpression","messageId":"noProcessExit","endLine":25,"endColumn":18},{"ruleId":"max-len","severity":2,"message":"This line has a length of 111. Maximum allowed is 100.","line":36,"column":1,"nodeType":"Program","messageId":"max","endLine":36,"endColumn":112},{"ruleId":"max-len","severity":2,"message":"This line has a length of 101. Maximum allowed is 100.","line":45,"column":1,"nodeType":"Program","messageId":"max","endLine":45,"endColumn":102},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":63,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":63,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1738,1784],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":130,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":130,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3524,3576],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":131,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":131,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3579,3637],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":134,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":134,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3735,3789],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":138,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":138,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3809,3868],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":139,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":139,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3871,3937],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":142,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":142,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3972,4028],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":163,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":163,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4595,4653],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":169,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":169,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4736,4783],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"max-len","severity":2,"message":"This line has a length of 119. Maximum allowed is 100.","line":170,"column":1,"nodeType":"Program","messageId":"max","endLine":170,"endColumn":120},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":170,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":170,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4788,4903],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":179,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":179,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5177,5256],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":191,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":191,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5550,5594],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":193,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":193,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5644,5701],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":199,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":199,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5798,5873],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":200,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":200,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5878,5934],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":205,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":205,"endColumn":12,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5960,6005],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":206,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":206,"endColumn":12,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6006,6077],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":207,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":207,"endColumn":12,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6078,6141],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":215,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":215,"endColumn":12,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6341,6404],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-process-exit","severity":2,"message":"Don't use process.exit(); throw an error instead.","line":218,"column":1,"nodeType":"CallExpression","messageId":"noProcessExit","endLine":218,"endColumn":41}],"suppressedMessages":[],"errorCount":24,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\n/**\n * Advanced linting script with detailed reporting\n * Run with: node scripts/lint.js [--fix] [--staged]\n */\n\nconst { execSync } = require('child_process');\nconst chalk = require('chalk');\nconst _ = require('lodash');\nconst path = require('path');\nconst fs = require('fs');\n\n// Parse command line arguments\nconst args = process.argv.slice(2);\nconst shouldFix = args.includes('--fix');\nconst stagedOnly = args.includes('--staged');\n\n// Configuration\nconst ESLINT_CONFIG_PATH = path.resolve(__dirname, '..', '.eslintrc.js');\nconst IGNORE_PATTERNS = ['node_modules', 'dist', 'build', 'coverage', '.git'];\n\n// Ensure ESLint config exists\nif (!fs.existsSync(ESLINT_CONFIG_PATH)) {\n  console.error(chalk.red('Error: ESLint config not found at', ESLINT_CONFIG_PATH));\n  process.exit(1);\n}\n\n/**\n * Get files to lint\n * @returns {string[]} Array of file paths\n */\nfunction getFilesToLint() {\n  try {\n    if (stagedOnly) {\n      // Get staged JS files\n      const output = execSync('git diff --cached --name-only --diff-filter=ACMR \"*.js\"', { encoding: 'utf8' });\n      return output\n        .split('\\n')\n        .filter(Boolean)\n        .filter((file) => !IGNORE_PATTERNS.some((pattern) => file.includes(pattern)));\n    }\n\n    // Get all JS files\n    const output = execSync(\n      `find . -type f -name \"*.js\" ${IGNORE_PATTERNS.map((p) => `-not -path \"*/${p}/*\"`).join(' ')}`,\n      { encoding: 'utf8' },\n    );\n\n    return output.split('\\n').filter(Boolean);\n  } catch (error) {\n    console.error(chalk.red('Error getting files to lint:'), error.message);\n    return [];\n  }\n}\n\n/**\n * Run ESLint on files\n * @param {string[]} files - Files to lint\n * @returns {Object} Lint results\n */\nfunction runEslint(files) {\n  if (!files.length) {\n    console.log(chalk.yellow('No files to lint'));\n    return {\n      success: true, output: '', errorCount: 0, warningCount: 0,\n    };\n  }\n\n  const fixFlag = shouldFix ? '--fix' : '';\n  const formatFlag = '--format json';\n  const command = `npx eslint ${fixFlag} ${formatFlag} ${files.join(' ')}`;\n\n  try {\n    const output = execSync(command, { encoding: 'utf8' });\n    const results = JSON.parse(output);\n\n    // Calculate total errors and warnings\n    const stats = results.reduce(\n      (acc, file) => {\n        acc.errorCount += file.errorCount;\n        acc.warningCount += file.warningCount;\n        return acc;\n      },\n      { errorCount: 0, warningCount: 0 },\n    );\n\n    return {\n      success: stats.errorCount === 0,\n      output,\n      results,\n      ...stats,\n    };\n  } catch (error) {\n    // ESLint returns non-zero exit code when there are errors\n    try {\n      const results = JSON.parse(error.stdout);\n\n      // Calculate total errors and warnings\n      const stats = results.reduce(\n        (acc, file) => {\n          acc.errorCount += file.errorCount;\n          acc.warningCount += file.warningCount;\n          return acc;\n        },\n        { errorCount: 0, warningCount: 0 },\n      );\n\n      return {\n        success: false,\n        output: error.stdout,\n        results,\n        ...stats,\n      };\n    } catch (parseError) {\n      console.error(chalk.red('Error parsing ESLint output:'), parseError.message);\n      console.error(error.stdout || error.message);\n      return {\n        success: false, output: error.message, errorCount: 1, warningCount: 0,\n      };\n    }\n  }\n}\n\n/**\n * Format and display lint results\n * @param {Object} lintResult - Lint results\n * @param {string[]} files - Files that were linted\n */\nfunction displayResults(lintResult, files) {\n  console.log(chalk.bold('\\n=== ESLint Results ==='));\n  console.log(`Files checked: ${chalk.cyan(files.length)}`);\n\n  if (lintResult.success && lintResult.errorCount === 0 && lintResult.warningCount === 0) {\n    console.log(chalk.green('✓ All files pass linting!'));\n    return;\n  }\n\n  console.log(`Errors: ${chalk.red(lintResult.errorCount)}`);\n  console.log(`Warnings: ${chalk.yellow(lintResult.warningCount)}`);\n\n  if (!lintResult.results) {\n    console.log(chalk.red('No detailed results available'));\n    return;\n  }\n\n  // Group issues by file\n  const fileIssues = lintResult.results\n    .filter((file) => file.messages.length > 0)\n    .map((file) => {\n      const relativePath = path.relative(process.cwd(), file.filePath);\n      const errors = file.messages.filter((msg) => msg.severity === 2);\n      const warnings = file.messages.filter((msg) => msg.severity === 1);\n\n      return {\n        path: relativePath,\n        errors,\n        warnings,\n        messages: _.sortBy(file.messages, ['line', 'column']),\n      };\n    });\n\n  if (fileIssues.length === 0) {\n    console.log(chalk.green('No issues found in any files!'));\n    return;\n  }\n\n  // Display issues by file\n  fileIssues.forEach((file) => {\n    console.log(`\\n${chalk.underline(file.path)}`);\n    console.log(`  ${chalk.red(`${file.errors.length} errors`)}, ${chalk.yellow(`${file.warnings.length} warnings`)}`);\n\n    file.messages.forEach((msg) => {\n      const location = `${msg.line}:${msg.column}`;\n      const severity = msg.severity === 2\n        ? chalk.red('error')\n        : chalk.yellow('warning');\n      const ruleId = msg.ruleId ? chalk.gray(`(${msg.ruleId})`) : '';\n\n      console.log(`  ${chalk.cyan(location)} ${severity}: ${msg.message} ${ruleId}`);\n    });\n  });\n\n  // Summary of most common issues\n  const allMessages = _.flatMap(fileIssues, 'messages');\n  const ruleStats = _.countBy(allMessages, 'ruleId');\n  const topIssues = Object.entries(ruleStats)\n    .sort((a, b) => b[1] - a[1])\n    .slice(0, 5);\n\n  if (topIssues.length > 0) {\n    console.log('\\n=== Most Common Issues ===');\n    topIssues.forEach(([rule, count]) => {\n      console.log(`${chalk.cyan(rule)}: ${count} occurrences`);\n    });\n  }\n\n  // Provide fix instructions\n  if (lintResult.errorCount > 0 && !shouldFix) {\n    console.log(chalk.bold.yellow('\\nTo automatically fix some issues, run:'));\n    console.log(chalk.cyan('  node scripts/lint.js --fix'));\n  }\n}\n\n// Main execution\nconsole.log(chalk.bold('Running ESLint...'));\nconsole.log(`Mode: ${stagedOnly ? 'Staged files only' : 'All files'}`);\nconsole.log(`Auto-fix: ${shouldFix ? 'Enabled' : 'Disabled'}`);\n\nconst startTime = Date.now();\nconst files = getFilesToLint();\nconst lintResult = runEslint(files);\nconst duration = ((Date.now() - startTime) / 1000).toFixed(2);\n\ndisplayResults(lintResult, files);\nconsole.log(chalk.gray(`\\nLinting completed in ${duration}s`));\n\n// Exit with appropriate code\nprocess.exit(lintResult.success ? 0 : 1);\n","usedDeprecatedRules":[{"ruleId":"max-len","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/server/server.js","messages":[{"ruleId":"no-process-exit","severity":2,"message":"Don't use process.exit(); throw an error instead.","line":23,"column":22,"nodeType":"CallExpression","messageId":"noProcessExit","endLine":23,"endColumn":37},{"ruleId":"no-process-exit","severity":2,"message":"Don't use process.exit(); throw an error instead.","line":30,"column":22,"nodeType":"CallExpression","messageId":"noProcessExit","endLine":30,"endColumn":37}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Local CodeRabbit Server\n * Main entry point for the Express server\n */\n\n// Load environment variables\nrequire('dotenv').config();\n\nconst app = require('./src/app');\nconst config = require('./src/config');\nconst logger = require('./src/utils/logger');\n\n// Start the server\nconst server = app.listen(config.port, () => {\n  logger.info(`Server running in ${config.nodeEnv} mode on port ${config.port}`);\n  logger.info(`API available at http://localhost:${config.port}`);\n});\n\n// Handle unhandled promise rejections\nprocess.on('unhandledRejection', (err) => {\n  logger.error('Unhandled Promise Rejection:', err);\n  // Close server & exit process\n  server.close(() => process.exit(1));\n});\n\n// Handle uncaught exceptions\nprocess.on('uncaughtException', (err) => {\n  logger.error('Uncaught Exception:', err);\n  // Close server & exit process\n  server.close(() => process.exit(1));\n});\n\n// Handle SIGTERM\nprocess.on('SIGTERM', () => {\n  logger.info('SIGTERM received. Shutting down gracefully');\n  server.close(() => {\n    logger.info('Process terminated');\n  });\n});\n\nmodule.exports = server;\n","usedDeprecatedRules":[{"ruleId":"max-len","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/server/src/app.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"max-len","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/server/src/config/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"max-len","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/server/src/controllers/diffController.js","messages":[{"ruleId":"promise/always-return","severity":1,"message":"Each then() should return a value or throw","line":11,"column":3,"nodeType":"IfStatement","messageId":"thenShouldReturnOrThrow","endLine":13,"endColumn":4},{"ruleId":"consistent-return","severity":2,"message":"Expected to return a value at the end of async arrow function.","line":23,"column":36,"nodeType":"ArrowFunctionExpression","messageId":"missingReturn","endLine":23,"endColumn":38},{"ruleId":"consistent-return","severity":2,"message":"Expected to return a value at the end of async arrow function.","line":55,"column":40,"nodeType":"ArrowFunctionExpression","messageId":"missingReturn","endLine":55,"endColumn":42}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const GitService = require('../services/GitService');\nconst AnalyzerService = require('../services/AnalyzerService');\nconst logger = require('../utils/logger');\n\n// Create service instances\nconst gitService = new GitService();\nconst analyzerService = new AnalyzerService();\n\n// Load initial state\ngitService.loadState().then((repoPath) => {\n  if (repoPath) {\n    analyzerService.setRepoPath(repoPath);\n  }\n}).catch((err) => {\n  logger.error('Failed to load initial state:', err);\n});\n\n/**\n * Get diff between two branches\n * @param {Object} req - Express request object\n * @param {Object} res - Express response object\n */\nexports.getDiff = async (req, res) => {\n  try {\n    const { fromBranch, toBranch } = req.body;\n\n    if (!gitService.repoPath) {\n      return res.status(400).json({ error: 'No repository selected' });\n    }\n\n    if (!fromBranch || !toBranch) {\n      return res.status(400).json({ error: 'Both branches must be specified' });\n    }\n\n    // Get diff between branches\n    const diff = await gitService.getDiff(fromBranch, toBranch);\n\n    res.json({\n      diff,\n      fromBranch,\n      toBranch,\n      repository: gitService.repoPath,\n    });\n  } catch (error) {\n    logger.error('Error getting diff:', error);\n    res.status(500).json({ error: 'Failed to get diff', details: error.message });\n  }\n};\n\n/**\n * Analyze diff between two branches\n * @param {Object} req - Express request object\n * @param {Object} res - Express response object\n */\nexports.analyzeDiff = async (req, res) => {\n  try {\n    const { fromBranch, toBranch } = req.body;\n\n    if (!gitService.repoPath) {\n      return res.status(400).json({ error: 'No repository selected' });\n    }\n\n    if (!fromBranch || !toBranch) {\n      return res.status(400).json({ error: 'Both branches must be specified' });\n    }\n\n    // Get diff between branches\n    const diff = await gitService.getDiff(fromBranch, toBranch);\n\n    // Analyze the diff\n    const analysis = await analyzerService.analyzeDiff(diff);\n\n    res.json({\n      analysis,\n      fromBranch,\n      toBranch,\n      repository: gitService.repoPath,\n    });\n  } catch (error) {\n    logger.error('Error analyzing diff:', error);\n    res.status(500).json({ error: 'Failed to analyze diff', details: error.message });\n  }\n};\n","usedDeprecatedRules":[{"ruleId":"max-len","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/server/src/controllers/repositoryController.js","messages":[{"ruleId":"consistent-return","severity":2,"message":"Expected to return a value at the end of async arrow function.","line":33,"column":42,"nodeType":"ArrowFunctionExpression","messageId":"missingReturn","endLine":33,"endColumn":44},{"ruleId":"consistent-return","severity":2,"message":"Expected to return a value at the end of async arrow function.","line":74,"column":40,"nodeType":"ArrowFunctionExpression","messageId":"missingReturn","endLine":74,"endColumn":42},{"ruleId":"consistent-return","severity":2,"message":"Expected to return a value at the end of async arrow function.","line":99,"column":46,"nodeType":"ArrowFunctionExpression","messageId":"missingReturn","endLine":99,"endColumn":48}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const path = require('path');\nconst GitService = require('../services/GitService');\nconst logger = require('../utils/logger');\n\n// Create a GitService instance\nconst gitService = new GitService();\n\n// Load initial state\ngitService.loadState().catch((err) => {\n  logger.error('Failed to load initial state:', err);\n});\n\n/**\n * Get list of repositories\n * @param {Object} req - Express request object\n * @param {Object} res - Express response object\n */\nexports.getRepositories = async (req, res) => {\n  try {\n    const repositories = await gitService.findRepositories();\n    res.json(repositories);\n  } catch (error) {\n    logger.error('Error getting repositories:', error);\n    res.status(500).json({ error: 'Failed to get repositories', details: error.message });\n  }\n};\n\n/**\n * Set current repository\n * @param {Object} req - Express request object\n * @param {Object} res - Express response object\n */\nexports.setRepository = async (req, res) => {\n  try {\n    const { path: repoPath } = req.body;\n\n    if (!repoPath) {\n      return res.status(400).json({ error: 'Repository path is required' });\n    }\n\n    // Set repository path\n    gitService.setRepoPath(repoPath);\n\n    // Verify it's a git repository\n    const isRepo = await gitService.isValidRepo();\n    if (!isRepo) {\n      return res.status(400).json({ error: 'Not a valid git repository' });\n    }\n\n    // Get branches\n    const branches = await gitService.getBranches();\n    const currentBranch = await gitService.getCurrentBranch();\n\n    // Save state\n    await gitService.saveState();\n\n    res.json({\n      path: repoPath,\n      name: path.basename(repoPath),\n      branches: branches.all || [],\n      current: currentBranch,\n    });\n  } catch (error) {\n    logger.error('Error setting repository:', error);\n    res.status(500).json({ error: 'Failed to set repository', details: error.message });\n  }\n};\n\n/**\n * Get branches for current repository\n * @param {Object} req - Express request object\n * @param {Object} res - Express response object\n */\nexports.getBranches = async (req, res) => {\n  try {\n    if (!gitService.repoPath) {\n      return res.status(400).json({ error: 'No repository selected' });\n    }\n\n    const branches = await gitService.getBranches();\n    const currentBranch = await gitService.getCurrentBranch();\n\n    res.json({\n      repository: path.basename(gitService.repoPath),\n      branches: branches.all || [],\n      current: currentBranch,\n    });\n  } catch (error) {\n    logger.error('Error getting branches:', error);\n    res.status(500).json({ error: 'Failed to get branches', details: error.message });\n  }\n};\n\n/**\n * Get current repository info\n * @param {Object} req - Express request object\n * @param {Object} res - Express response object\n */\nexports.getRepositoryInfo = async (req, res) => {\n  try {\n    if (!gitService.repoPath) {\n      return res.status(400).json({ error: 'No repository selected' });\n    }\n\n    const branches = await gitService.getBranches();\n    const currentBranch = await gitService.getCurrentBranch();\n\n    res.json({\n      path: gitService.repoPath,\n      name: path.basename(gitService.repoPath),\n      branches: branches.all || [],\n      current: currentBranch,\n    });\n  } catch (error) {\n    logger.error('Error getting repository info:', error);\n    res.status(500).json({ error: 'Failed to get repository info', details: error.message });\n  }\n};\n","usedDeprecatedRules":[{"ruleId":"max-len","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/server/src/middleware/cors.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"max-len","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/server/src/middleware/errorHandler.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'next' is defined but never used. Allowed unused args must match /^_/u.","line":11,"column":38,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":42}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const logger = require('../utils/logger');\nconst config = require('../config');\n\n/**\n * Error handling middleware\n * @param {Error} err - Error object\n * @param {Object} req - Express request object\n * @param {Object} res - Express response object\n * @param {Function} next - Express next function\n */\nconst errorHandler = (err, req, res, next) => {\n  // Log the error\n  logger.error('Unhandled error:', {\n    error: err.message,\n    stack: err.stack,\n    path: req.path,\n    method: req.method,\n  });\n\n  // Send error response\n  res.status(err.status || 500).json({\n    error: 'Internal Server Error',\n    message: config.nodeEnv === 'development' ? err.message : 'Something went wrong',\n    stack: config.nodeEnv === 'development' ? err.stack : undefined,\n  });\n};\n\nmodule.exports = errorHandler;\n","usedDeprecatedRules":[{"ruleId":"max-len","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/server/src/middleware/requestLogger.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"max-len","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/server/src/routes/diffRoutes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"max-len","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/server/src/routes/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"max-len","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/server/src/routes/repositoryRoutes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"max-len","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/server/src/services/AnalyzerService.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'fs' is assigned a value but never used.","line":2,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":9},{"ruleId":"class-methods-use-this","severity":2,"message":"Expected 'this' to be used by class method 'parseDiff'.","line":51,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":51,"endColumn":12},{"ruleId":"no-restricted-syntax","severity":2,"message":"iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.","line":58,"column":5,"nodeType":"ForOfStatement","messageId":"restrictedSyntax","endLine":121,"endColumn":6},{"ruleId":"brace-style","severity":2,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":79,"column":7,"nodeType":"Punctuator","messageId":"nextLineClose","endLine":79,"endColumn":8},{"ruleId":"security/detect-unsafe-regex","severity":2,"message":"Unsafe Regular Expression","line":83,"column":34,"nodeType":"Literal","endLine":83,"endColumn":72},{"ruleId":"brace-style","severity":2,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":93,"column":7,"nodeType":"Punctuator","messageId":"nextLineClose","endLine":93,"endColumn":8},{"ruleId":"no-plusplus","severity":2,"message":"Unary operator '++' used.","line":101,"column":11,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":101,"endColumn":34},{"ruleId":"brace-style","severity":2,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":103,"column":7,"nodeType":"Punctuator","messageId":"nextLineClose","endLine":103,"endColumn":8},{"ruleId":"no-plusplus","severity":2,"message":"Unary operator '++' used.","line":111,"column":11,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":111,"endColumn":34},{"ruleId":"brace-style","severity":2,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":113,"column":7,"nodeType":"Punctuator","messageId":"nextLineClose","endLine":113,"endColumn":8},{"ruleId":"class-methods-use-this","severity":2,"message":"Expected 'this' to be used by class method 'getFileType'.","line":164,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":164,"endColumn":14},{"ruleId":"class-methods-use-this","severity":2,"message":"Expected 'this' to be used by class method 'calculateComplexity'.","line":198,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":198,"endColumn":22},{"ruleId":"class-methods-use-this","severity":2,"message":"Expected 'this' to be used by class method 'calculateImpactLevel'.","line":225,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":225,"endColumn":23},{"ruleId":"class-methods-use-this","severity":2,"message":"Expected 'this' to be used by class method 'generateSummary'.","line":240,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":240,"endColumn":18},{"ruleId":"no-plusplus","severity":2,"message":"Unary operator '++' used.","line":255,"column":9,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":255,"endColumn":50},{"ruleId":"no-plusplus","severity":2,"message":"Unary operator '++' used.","line":257,"column":9,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":257,"endColumn":31}],"suppressedMessages":[],"errorCount":16,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const path = require('path');\nconst fs = require('fs').promises;\nconst logger = require('../utils/logger');\n\nclass AnalyzerService {\n  constructor(repoPath = '') {\n    this.repoPath = repoPath;\n  }\n\n  /**\n   * Set the repository path\n   * @param {string} repoPath - Path to the repository\n   */\n  setRepoPath(repoPath) {\n    this.repoPath = repoPath;\n  }\n\n  /**\n   * Analyze a diff output\n   * @param {string} diffOutput - Git diff output\n   * @returns {Promise<Object>} - Analyzed diff data\n   */\n  async analyzeDiff(diffOutput) {\n    try {\n      // Parse the diff output\n      const files = this.parseDiff(diffOutput);\n\n      // Analyze each file\n      const analyzedFiles = await Promise.all(\n        files.map(async (file) => ({\n          ...file,\n          analysis: await this.analyzeFile(file),\n        })),\n      );\n\n      return {\n        files: analyzedFiles,\n        summary: this.generateSummary(analyzedFiles),\n      };\n    } catch (error) {\n      logger.error('Error analyzing diff:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Parse diff output into structured data\n   * @param {string} diffOutput - Git diff output\n   * @returns {Array} - Array of file objects\n   */\n  parseDiff(diffOutput) {\n    const files = [];\n    let currentFile = null;\n\n    // Split the diff output into lines\n    const lines = diffOutput.split('\\n');\n\n    for (const line of lines) {\n      // Check if line indicates a new file\n      if (line.startsWith('diff --git')) {\n        // If we have a current file, add it to the files array\n        if (currentFile) {\n          files.push(currentFile);\n        }\n\n        // Extract file path\n        const match = line.match(/diff --git a\\/(.*) b\\/(.*)/);\n        const filePath = match ? match[1] : 'unknown';\n\n        // Create a new file object\n        currentFile = {\n          path: filePath,\n          name: path.basename(filePath),\n          extension: path.extname(filePath).slice(1),\n          changes: [],\n          additions: 0,\n          deletions: 0,\n        };\n      }\n      // Check if line is a hunk header\n      else if (line.startsWith('@@')) {\n        // Extract line numbers\n        const match = line.match(/@@ -(\\d+),?(\\d+)? \\+(\\d+),?(\\d+)? @@/);\n\n        if (match && currentFile) {\n          const startLine = parseInt(match[3], 10);\n          currentFile.changes.push({\n            type: 'hunk',\n            content: line,\n            startLine,\n          });\n        }\n      }\n      // Check if line is an addition\n      else if (line.startsWith('+') && !line.startsWith('+++')) {\n        if (currentFile) {\n          currentFile.changes.push({\n            type: 'addition',\n            content: line.slice(1),\n          });\n          currentFile.additions++;\n        }\n      }\n      // Check if line is a deletion\n      else if (line.startsWith('-') && !line.startsWith('---')) {\n        if (currentFile) {\n          currentFile.changes.push({\n            type: 'deletion',\n            content: line.slice(1),\n          });\n          currentFile.deletions++;\n        }\n      }\n      // Otherwise, it's a context line\n      else if (currentFile && !line.startsWith('---') && !line.startsWith('+++')) {\n        currentFile.changes.push({\n          type: 'context',\n          content: line,\n        });\n      }\n    }\n\n    // Add the last file\n    if (currentFile) {\n      files.push(currentFile);\n    }\n\n    return files;\n  }\n\n  /**\n   * Analyze a file's changes\n   * @param {Object} file - File object\n   * @returns {Promise<Object>} - Analysis results\n   */\n  async analyzeFile(file) {\n    try {\n      // Determine file type based on extension\n      const fileType = this.getFileType(file.extension);\n\n      // Calculate complexity metrics\n      const complexity = this.calculateComplexity(file);\n\n      return {\n        fileType,\n        complexity,\n        impactLevel: this.calculateImpactLevel(file, complexity),\n      };\n    } catch (error) {\n      logger.error(`Error analyzing file ${file.path}:`, error);\n      return {\n        fileType: 'unknown',\n        complexity: { score: 0 },\n        impactLevel: 'unknown',\n      };\n    }\n  }\n\n  /**\n   * Get file type based on extension\n   * @param {string} extension - File extension\n   * @returns {string} - File type\n   */\n  getFileType(extension) {\n    const typeMap = {\n      js: 'JavaScript',\n      jsx: 'React',\n      ts: 'TypeScript',\n      tsx: 'React TypeScript',\n      py: 'Python',\n      java: 'Java',\n      rb: 'Ruby',\n      php: 'PHP',\n      go: 'Go',\n      rs: 'Rust',\n      c: 'C',\n      cpp: 'C++',\n      cs: 'C#',\n      html: 'HTML',\n      css: 'CSS',\n      scss: 'SCSS',\n      json: 'JSON',\n      md: 'Markdown',\n      yml: 'YAML',\n      yaml: 'YAML',\n      xml: 'XML',\n      sql: 'SQL',\n    };\n\n    return typeMap[extension.toLowerCase()] || 'Unknown';\n  }\n\n  /**\n   * Calculate complexity metrics for a file\n   * @param {Object} file - File object\n   * @returns {Object} - Complexity metrics\n   */\n  calculateComplexity(file) {\n    // Simple complexity calculation based on number of changes\n    const totalChanges = file.additions + file.deletions;\n\n    let score;\n    if (totalChanges < 10) {\n      score = 1; // Low complexity\n    } else if (totalChanges < 50) {\n      score = 2; // Medium complexity\n    } else {\n      score = 3; // High complexity\n    }\n\n    return {\n      score,\n      changes: totalChanges,\n      additions: file.additions,\n      deletions: file.deletions,\n    };\n  }\n\n  /**\n   * Calculate impact level of changes\n   * @param {Object} file - File object\n   * @param {Object} complexity - Complexity metrics\n   * @returns {string} - Impact level\n   */\n  calculateImpactLevel(file, complexity) {\n    // Determine impact level based on complexity and file type\n    if (complexity.score === 3) {\n      return 'high';\n    } if (complexity.score === 2) {\n      return 'medium';\n    }\n    return 'low';\n  }\n\n  /**\n   * Generate a summary of the analyzed diff\n   * @param {Array} files - Array of analyzed file objects\n   * @returns {Object} - Summary object\n   */\n  generateSummary(files) {\n    const totalFiles = files.length;\n    const totalAdditions = files.reduce((sum, file) => sum + file.additions, 0);\n    const totalDeletions = files.reduce((sum, file) => sum + file.deletions, 0);\n\n    // Count files by impact level\n    const impactCounts = {\n      high: 0,\n      medium: 0,\n      low: 0,\n      unknown: 0,\n    };\n\n    files.forEach((file) => {\n      if (file.analysis && file.analysis.impactLevel) {\n        impactCounts[file.analysis.impactLevel]++;\n      } else {\n        impactCounts.unknown++;\n      }\n    });\n\n    // Determine overall impact\n    let overallImpact;\n    if (impactCounts.high > 0) {\n      overallImpact = 'high';\n    } else if (impactCounts.medium > 0) {\n      overallImpact = 'medium';\n    } else {\n      overallImpact = 'low';\n    }\n\n    return {\n      totalFiles,\n      totalAdditions,\n      totalDeletions,\n      impactCounts,\n      overallImpact,\n    };\n  }\n}\n\nmodule.exports = AnalyzerService;\n","usedDeprecatedRules":[{"ruleId":"max-len","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/server/src/services/GitService.js","messages":[{"ruleId":"security/detect-non-literal-fs-filename","severity":1,"message":"Found existsSync from package \"fs\" with non literal argument at index 0","line":87,"column":11,"nodeType":"CallExpression","endLine":87,"endColumn":48},{"ruleId":"security/detect-non-literal-fs-filename","severity":1,"message":"Found readFile from package \"fs\" with non literal argument at index 0","line":88,"column":28,"nodeType":"CallExpression","endLine":88,"endColumn":67},{"ruleId":"security/detect-non-literal-fs-filename","severity":1,"message":"Found writeFile from package \"fs\" with non literal argument at index 0","line":110,"column":13,"nodeType":"CallExpression","endLine":110,"endColumn":90},{"ruleId":"class-methods-use-this","severity":2,"message":"Expected 'this' to be used by class async method 'findRepositories'.","line":122,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":122,"endColumn":25},{"ruleId":"no-restricted-syntax","severity":2,"message":"iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.","line":135,"column":7,"nodeType":"ForOfStatement","messageId":"restrictedSyntax","endLine":170,"endColumn":8},{"ruleId":"no-await-in-loop","severity":2,"message":"Unexpected `await` inside a loop.","line":138,"column":11,"nodeType":"AwaitExpression","messageId":"unexpectedAwait","endLine":138,"endColumn":29},{"ruleId":"security/detect-non-literal-fs-filename","severity":1,"message":"Found stat from package \"fs\" with non literal argument at index 0","line":138,"column":17,"nodeType":"CallExpression","endLine":138,"endColumn":29},{"ruleId":"no-await-in-loop","severity":2,"message":"Unexpected `await` inside a loop.","line":141,"column":25,"nodeType":"AwaitExpression","messageId":"unexpectedAwait","endLine":141,"endColumn":71},{"ruleId":"security/detect-non-literal-fs-filename","severity":1,"message":"Found readdir from package \"fs\" with non literal argument at index 0","line":141,"column":31,"nodeType":"CallExpression","endLine":141,"endColumn":71},{"ruleId":"no-restricted-syntax","severity":2,"message":"iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.","line":147,"column":11,"nodeType":"ForOfStatement","messageId":"restrictedSyntax","endLine":165,"endColumn":12},{"ruleId":"no-await-in-loop","severity":2,"message":"Unexpected `await` inside a loop.","line":150,"column":15,"nodeType":"AwaitExpression","messageId":"unexpectedAwait","endLine":150,"endColumn":36},{"ruleId":"security/detect-non-literal-fs-filename","severity":1,"message":"Found stat from package \"fs\" with non literal argument at index 0","line":150,"column":21,"nodeType":"CallExpression","endLine":150,"endColumn":36},{"ruleId":"no-await-in-loop","severity":2,"message":"Unexpected `await` inside a loop.","line":154,"column":30,"nodeType":"AwaitExpression","messageId":"unexpectedAwait","endLine":154,"endColumn":53}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const simpleGit = require('simple-git');\nconst path = require('path');\nconst fs = require('fs').promises;\nconst fsSync = require('fs');\nconst os = require('os');\nconst logger = require('../utils/logger');\nconst config = require('../config');\n\nclass GitService {\n  constructor(repoPath = '') {\n    this.repoPath = repoPath;\n    this.git = simpleGit(repoPath);\n    this.stateFilePath = path.join(__dirname, '..', '..', config.git.statePath);\n  }\n\n  /**\n   * Set the repository path\n   * @param {string} repoPath - Path to the repository\n   */\n  setRepoPath(repoPath) {\n    this.repoPath = repoPath;\n    this.git = simpleGit(repoPath);\n  }\n\n  /**\n   * Check if the current path is a valid Git repository\n   * @returns {Promise<boolean>} - True if valid Git repository\n   */\n  async isValidRepo() {\n    try {\n      return await this.git.checkIsRepo();\n    } catch (error) {\n      logger.error('Error checking if valid repo:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Get all branches in the repository\n   * @returns {Promise<Object>} - Object containing branch information\n   */\n  async getBranches() {\n    try {\n      return await this.git.branchLocal();\n    } catch (error) {\n      logger.error('Error getting branches:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get the current branch\n   * @returns {Promise<string>} - Current branch name\n   */\n  async getCurrentBranch() {\n    try {\n      return (await this.git.branch()).current;\n    } catch (error) {\n      logger.error('Error getting current branch:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get diff between two branches\n   * @param {string} fromBranch - Source branch\n   * @param {string} toBranch - Target branch\n   * @returns {Promise<string>} - Diff output\n   */\n  async getDiff(fromBranch, toBranch) {\n    try {\n      return await this.git.diff([fromBranch, toBranch]);\n    } catch (error) {\n      logger.error('Error getting diff:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Load repository path from state file\n   * @returns {Promise<string>} - Repository path\n   */\n  async loadState() {\n    try {\n      logger.info('Loading state from:', this.stateFilePath);\n\n      if (fsSync.existsSync(this.stateFilePath)) {\n        const data = await fs.readFile(this.stateFilePath, 'utf8');\n        const state = JSON.parse(data);\n        this.repoPath = state.repoPath || '';\n        this.git = simpleGit(this.repoPath);\n        logger.info('Loaded repository path:', this.repoPath);\n        return this.repoPath;\n      }\n      logger.info('No state file exists yet');\n      return '';\n    } catch (error) {\n      logger.error('Error loading state:', error);\n      return '';\n    }\n  }\n\n  /**\n   * Save repository path to state file\n   * @returns {Promise<void>}\n   */\n  async saveState() {\n    try {\n      logger.info('Saving state, repoPath:', this.repoPath);\n      await fs.writeFile(this.stateFilePath, JSON.stringify({ repoPath: this.repoPath }));\n      logger.info('State saved successfully');\n    } catch (error) {\n      logger.error('Error saving state:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Find Git repositories in common directories\n   * @returns {Promise<Array>} - Array of repository objects\n   */\n  async findRepositories() {\n    try {\n      const homeDir = os.homedir();\n      const commonDirs = [\n        path.join(homeDir, 'Documents'),\n        path.join(homeDir, 'Projects'),\n        path.join(homeDir, 'Development'),\n        path.join(homeDir, 'Code'),\n        path.join(homeDir, 'Github'),\n      ];\n\n      const repositories = [];\n\n      for (const dir of commonDirs) {\n        try {\n          // Check if directory exists\n          await fs.stat(dir);\n\n          // Get subdirectories\n          const items = await fs.readdir(dir, { withFileTypes: true });\n          const subdirs = items\n            .filter((item) => item.isDirectory())\n            .map((item) => path.join(dir, item.name));\n\n          // Check each subdirectory for .git folder\n          for (const subdir of subdirs) {\n            try {\n              const gitDir = path.join(subdir, '.git');\n              await fs.stat(gitDir);\n\n              // It's a git repository\n              const git = simpleGit(subdir);\n              const isRepo = await git.checkIsRepo();\n\n              if (isRepo) {\n                repositories.push({\n                  path: subdir,\n                  name: path.basename(subdir),\n                });\n              }\n            } catch (err) {\n              // Not a git repository, continue\n            }\n          }\n        } catch (err) {\n          // Directory doesn't exist, continue\n          logger.debug(`Directory doesn't exist: ${dir}`);\n        }\n      }\n\n      return repositories;\n    } catch (error) {\n      logger.error('Error finding repositories:', error);\n      return [];\n    }\n  }\n}\n\nmodule.exports = GitService;\n","usedDeprecatedRules":[{"ruleId":"max-len","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/server/src/utils/logger.js","messages":[{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":102,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":102,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"table"},"fix":{"range":[2854,2883],"text":""},"desc":"Remove the console.table()."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const winston = require('winston');\nconst chalk = require('chalk');\nconst config = require('../config');\n\n// Define log format\nconst logFormat = winston.format.combine(\n  winston.format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),\n  winston.format.errors({ stack: true }),\n  winston.format.splat(),\n  winston.format.json(),\n);\n\n// Custom formatter for console with enhanced colors using chalk\nconst consoleFormat = winston.format.combine(\n  winston.format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),\n  winston.format.printf(({\n    level, message, timestamp, ...meta\n  }) => {\n    // Define color scheme for different log levels\n    const colorize = (text, lvl) => {\n      switch (lvl) {\n        case 'error':\n          return chalk.bold.red(text);\n        case 'warn':\n          return chalk.keyword('orange')(text);\n        case 'info':\n          return chalk.bold.blue(text);\n        case 'http':\n          return chalk.magenta(text);\n        case 'verbose':\n          return chalk.cyan(text);\n        case 'debug':\n          return chalk.green(text);\n        case 'silly':\n          return chalk.grey(text);\n        default:\n          return text;\n      }\n    };\n\n    const colorizedLevel = colorize(level.toUpperCase(), level);\n    const colorizedTimestamp = chalk.gray(timestamp);\n    const metadata = Object.keys(meta).length\n      ? chalk.gray(JSON.stringify(meta, null, 2))\n      : '';\n\n    return `${colorizedTimestamp} ${colorizedLevel}: ${message} ${metadata}`;\n  }),\n);\n\n// Create the logger\nconst logger = winston.createLogger({\n  level: config.logging.level || 'info',\n  format: logFormat,\n  defaultMeta: { service: 'local-coderabbit' },\n  transports: [\n    // Write logs with level 'error' and below to error.log\n    new winston.transports.File({\n      filename: 'logs/error.log',\n      level: 'error',\n      dirname: 'logs',\n    }),\n    // Write all logs to combined.log\n    new winston.transports.File({\n      filename: 'logs/combined.log',\n      dirname: 'logs',\n    }),\n  ],\n});\n\n// If we're not in production, also log to the console with a simpler format\nif (config.nodeEnv !== 'production') {\n  logger.add(new winston.transports.Console({\n    format: consoleFormat,\n  }));\n}\n\n// Add convenience methods for colorized logging\nlogger.success = (message, meta = {}) => {\n  logger.info(`${chalk.bold.green('✓')} ${message}`, meta);\n};\n\nlogger.important = (message, meta = {}) => {\n  logger.info(`${chalk.bold.yellow('!')} ${message}`, meta);\n};\n\nlogger.highlight = (message, meta = {}) => {\n  logger.info(`${chalk.bold.cyan('→')} ${message}`, meta);\n};\n\nlogger.section = (title) => {\n  const line = chalk.gray('─'.repeat(80));\n  logger.info(`\\n${line}\\n${chalk.bold.white(title)}\\n${line}`);\n};\n\nlogger.table = (data, columns) => {\n  if (!data || !data.length) {\n    logger.info(chalk.gray('No data to display'));\n    return;\n  }\n\n  console.table(data, columns);\n};\n\nmodule.exports = logger;\n","usedDeprecatedRules":[{"ruleId":"max-len","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/server/src/utils/performance-analyzer.js","messages":[{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":23,"column":22,"nodeType":"MemberExpression","messageId":"unexpected","endLine":23,"endColumn":33},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":24,"column":25,"nodeType":"MemberExpression","messageId":"unexpected","endLine":24,"endColumn":36},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":25,"column":23,"nodeType":"MemberExpression","messageId":"unexpected","endLine":25,"endColumn":34},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":26,"column":22,"nodeType":"MemberExpression","messageId":"unexpected","endLine":26,"endColumn":33},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":27,"column":24,"nodeType":"MemberExpression","messageId":"unexpected","endLine":27,"endColumn":35},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":28,"column":24,"nodeType":"MemberExpression","messageId":"unexpected","endLine":28,"endColumn":35},{"ruleId":"max-len","severity":2,"message":"This line has a length of 105. Maximum allowed is 100.","line":68,"column":1,"nodeType":"Program","messageId":"max","endLine":68,"endColumn":106},{"ruleId":"max-len","severity":2,"message":"This line has a length of 109. Maximum allowed is 100.","line":70,"column":1,"nodeType":"Program","messageId":"max","endLine":70,"endColumn":110},{"ruleId":"no-shadow","severity":2,"message":"'_' is already declared in the upper scope on line 8 column 7.","line":87,"column":65,"nodeType":"Identifier","messageId":"noShadow","endLine":87,"endColumn":66},{"ruleId":"no-plusplus","severity":2,"message":"Unary operator '++' used.","line":101,"column":37,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":101,"endColumn":40},{"ruleId":"no-plusplus","severity":2,"message":"Unary operator '++' used.","line":130,"column":37,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":130,"endColumn":40},{"ruleId":"no-shadow","severity":2,"message":"'_' is already declared in the upper scope on line 8 column 7.","line":167,"column":46,"nodeType":"Identifier","messageId":"noShadow","endLine":167,"endColumn":47},{"ruleId":"no-restricted-syntax","severity":2,"message":"iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.","line":173,"column":5,"nodeType":"ForOfStatement","messageId":"restrictedSyntax","endLine":176,"endColumn":6},{"ruleId":"no-await-in-loop","severity":2,"message":"Unexpected `await` inside a loop.","line":174,"column":22,"nodeType":"AwaitExpression","messageId":"unexpectedAwait","endLine":174,"endColumn":56},{"ruleId":"no-plusplus","severity":2,"message":"Unary operator '++' used.","line":209,"column":34,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":209,"endColumn":37},{"ruleId":"no-plusplus","severity":2,"message":"Unary operator '++' used.","line":222,"column":37,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":222,"endColumn":40},{"ruleId":"no-plusplus","severity":2,"message":"Unary operator '++' used.","line":262,"column":37,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":262,"endColumn":40}],"suppressedMessages":[],"errorCount":17,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Performance Analyzer\n *\n * This utility demonstrates the performance benefits of using Lodash and Async\n * by comparing standard JavaScript operations with optimized versions.\n */\n\nconst _ = require('lodash');\nconst async = require('async');\nconst chalk = require('chalk');\nconst fs = require('fs');\nconst path = require('path');\nconst { performance } = require('perf_hooks');\n\n// Create reports directory if it doesn't exist\nconst reportsDir = path.join(__dirname, '..', '..', 'reports');\nif (!fs.existsSync(reportsDir)) {\n  fs.mkdirSync(reportsDir, { recursive: true });\n}\n\n// Logger setup\nconst log = {\n  info: (message) => console.log(chalk.blue(message)),\n  success: (message) => console.log(chalk.green(message)),\n  error: (message) => console.log(chalk.red(message)),\n  warn: (message) => console.log(chalk.yellow(message)),\n  result: (message) => console.log(chalk.cyan(message)),\n  header: (message) => console.log(chalk.bold.white(`\\n=== ${message} ===`)),\n};\n\n/**\n * Run a performance test\n * @param {string} name - Test name\n * @param {Function} fn - Function to test\n * @param {number} iterations - Number of iterations\n * @returns {Object} Test results\n */\nconst runTest = async (name, fn, iterations = 1000) => {\n  log.info(`Running test: ${name} (${iterations} iterations)`);\n\n  const start = performance.now();\n  const result = await fn(iterations);\n  const end = performance.now();\n\n  const duration = end - start;\n  log.success(`Completed in ${duration.toFixed(2)}ms`);\n\n  return {\n    name,\n    duration,\n    iterations,\n    opsPerSecond: (iterations / (duration / 1000)).toFixed(2),\n    result,\n  };\n};\n\n/**\n * Compare standard vs optimized implementations\n * @param {string} testName - Test name\n * @param {Function} standardFn - Standard implementation\n * @param {Function} optimizedFn - Optimized implementation\n * @param {number} iterations - Number of iterations\n */\nconst compareImplementations = async (testName, standardFn, optimizedFn, iterations = 1000) => {\n  log.header(testName);\n\n  const standardResult = await runTest(`Standard ${testName}`, standardFn, iterations);\n  const optimizedResult = await runTest(`Optimized ${testName} (Lodash/Async)`, optimizedFn, iterations);\n\n  const improvement = ((standardResult.duration - optimizedResult.duration) / standardResult.duration) * 100;\n\n  log.result(`\\nPerformance improvement: ${improvement.toFixed(2)}%`);\n  log.result(`Standard: ${standardResult.opsPerSecond} ops/sec`);\n  log.result(`Optimized: ${optimizedResult.opsPerSecond} ops/sec`);\n\n  return {\n    testName,\n    standardResult,\n    optimizedResult,\n    improvement,\n  };\n};\n\n// Test 1: Array Manipulation\nconst arrayManipulationTest = async () => {\n  // Generate test data\n  const generateArray = (size) => Array.from({ length: size }, (_, i) => ({\n    id: i,\n    value: Math.random() * 1000,\n    name: `Item ${i}`,\n    active: Math.random() > 0.5,\n  }));\n\n  const arraySize = 10000;\n  const testArray = generateArray(arraySize);\n\n  // Standard implementation\n  const standardArrayManipulation = async (iterations) => {\n    const results = [];\n\n    for (let i = 0; i < iterations; i++) {\n      // Filter, map, and sort operations\n      const filtered = testArray.filter((item) => item.active);\n      const mapped = filtered.map((item) => ({\n        id: item.id,\n        formattedValue: `$${item.value.toFixed(2)}`,\n      }));\n      const sorted = mapped.sort((a, b) => a.id - b.id);\n\n      // Group by ranges\n      const grouped = {};\n      sorted.forEach((item) => {\n        const range = Math.floor(item.id / 1000) * 1000;\n        if (!grouped[range]) {\n          grouped[range] = [];\n        }\n        grouped[range].push(item);\n      });\n\n      results.push(Object.keys(grouped).length);\n    }\n\n    return results.length;\n  };\n\n  // Optimized implementation with Lodash\n  const optimizedArrayManipulation = async (iterations) => {\n    const results = [];\n\n    for (let i = 0; i < iterations; i++) {\n      // Chained operations with Lodash\n      const processed = _(testArray)\n        .filter('active')\n        .map((item) => ({\n          id: item.id,\n          formattedValue: `$${item.value.toFixed(2)}`,\n        }))\n        .sortBy('id')\n        .groupBy((item) => Math.floor(item.id / 1000) * 1000)\n        .value();\n\n      results.push(Object.keys(processed).length);\n    }\n\n    return results.length;\n  };\n\n  return compareImplementations(\n    'Array Manipulation',\n    standardArrayManipulation,\n    optimizedArrayManipulation,\n    50, // Fewer iterations for this intensive test\n  );\n};\n\n// Test 2: Parallel Processing\nconst parallelProcessingTest = async () => {\n  // Simulate an async operation\n  const simulateAsyncOperation = (id) => new Promise((resolve) => {\n    const delay = Math.random() * 20; // Random delay up to 20ms\n    setTimeout(() => {\n      resolve({ id, processedAt: Date.now() });\n    }, delay);\n  });\n\n  // Generate test data - IDs to process\n  const items = Array.from({ length: 100 }, (_, i) => i);\n\n  // Standard implementation - sequential processing\n  const standardParallelProcessing = async () => {\n    const results = [];\n\n    for (const item of items) {\n      const result = await simulateAsyncOperation(item);\n      results.push(result);\n    }\n\n    return results.length;\n  };\n\n  // Optimized implementation with Async\n  const optimizedParallelProcessing = async () => {\n    const results = await async.mapLimit(\n      items,\n      10, // Concurrency limit\n      async (item) => simulateAsyncOperation(item),\n    );\n\n    return results.length;\n  };\n\n  return compareImplementations(\n    'Parallel Processing',\n    standardParallelProcessing,\n    optimizedParallelProcessing,\n    5, // Fewer iterations due to the nature of the test\n  );\n};\n\n// Test 3: Object Manipulation\nconst objectManipulationTest = async () => {\n  // Generate test data\n  const generateNestedObject = (depth, breadth) => {\n    if (depth === 0) {\n      return { value: Math.random() * 1000 };\n    }\n\n    const obj = {};\n    for (let i = 0; i < breadth; i++) {\n      obj[`prop${i}`] = generateNestedObject(depth - 1, breadth);\n    }\n\n    return obj;\n  };\n\n  const testObject = generateNestedObject(3, 5);\n\n  // Standard implementation\n  const standardObjectManipulation = async (iterations) => {\n    const results = [];\n\n    for (let i = 0; i < iterations; i++) {\n      // Deep clone\n      const cloned = JSON.parse(JSON.stringify(testObject));\n\n      // Merge with another object\n      const merged = {\n        ...cloned,\n        additionalProp: {\n          name: 'test',\n          values: [1, 2, 3],\n        },\n      };\n\n      // Extract values\n      const extractValues = (obj, result = []) => {\n        if (obj.value !== undefined) {\n          result.push(obj.value);\n          return result;\n        }\n\n        Object.values(obj).forEach((val) => {\n          if (typeof val === 'object') {\n            extractValues(val, result);\n          }\n        });\n\n        return result;\n      };\n\n      const values = extractValues(merged);\n      results.push(values.length);\n    }\n\n    return results.length;\n  };\n\n  // Optimized implementation with Lodash\n  const optimizedObjectManipulation = async (iterations) => {\n    const results = [];\n\n    for (let i = 0; i < iterations; i++) {\n      // Deep clone with Lodash\n      const cloned = _.cloneDeep(testObject);\n\n      // Merge with Lodash\n      const merged = _.merge({}, cloned, {\n        additionalProp: {\n          name: 'test',\n          values: [1, 2, 3],\n        },\n      });\n\n      // Extract values with Lodash\n      const values = [];\n      _.forEach(merged, function iterateValues(val) {\n        if (_.has(val, 'value')) {\n          values.push(val.value);\n        } else if (_.isObject(val)) {\n          _.forEach(val, iterateValues);\n        }\n      });\n\n      results.push(values.length);\n    }\n\n    return results.length;\n  };\n\n  return compareImplementations(\n    'Object Manipulation',\n    standardObjectManipulation,\n    optimizedObjectManipulation,\n    100, // Fewer iterations for this intensive test\n  );\n};\n\n// Run all tests and generate report\nconst runAllTests = async () => {\n  log.header('PERFORMANCE ANALYSIS');\n  log.info('Comparing standard JavaScript vs Lodash/Async optimized implementations\\n');\n\n  const results = [];\n\n  try {\n    results.push(await arrayManipulationTest());\n    results.push(await parallelProcessingTest());\n    results.push(await objectManipulationTest());\n\n    // Generate summary\n    log.header('SUMMARY');\n\n    results.forEach((result) => {\n      log.result(`${result.testName}: ${result.improvement.toFixed(2)}% improvement`);\n    });\n\n    // Save report to file\n    const report = {\n      timestamp: new Date().toISOString(),\n      results,\n      summary: {\n        averageImprovement: _.meanBy(results, 'improvement').toFixed(2),\n        tests: results.length,\n      },\n    };\n\n    fs.writeFileSync(\n      path.join(reportsDir, 'performance-report.json'),\n      JSON.stringify(report, null, 2),\n    );\n\n    log.success('\\nPerformance report saved to reports/performance-report.json');\n  } catch (error) {\n    log.error(`Error running tests: ${error.message}`);\n    console.error(error);\n  }\n};\n\n// Execute if run directly\nif (require.main === module) {\n  runAllTests();\n}\n\nmodule.exports = {\n  runTest,\n  compareImplementations,\n  runAllTests,\n};\n","usedDeprecatedRules":[{"ruleId":"max-len","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/server/src/utils/performance.js","messages":[],"suppressedMessages":[{"ruleId":"no-await-in-loop","severity":2,"message":"Unexpected `await` inside a loop.","line":161,"column":26,"nodeType":"AwaitExpression","messageId":"unexpectedAwait","endLine":161,"endColumn":53,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"max-len","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]}]
