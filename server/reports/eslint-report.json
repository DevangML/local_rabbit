[{"filePath":"/Users/devang/Documents/local_rabbit/server/.eslintrc.js","messages":[{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":13,"column":15,"nodeType":"Literal","messageId":"missing","endLine":14,"endColumn":1,"fix":{"range":[202,216],"text":"'security',\n  ]"}},{"ruleId":"max-len","severity":2,"message":"This line has a length of 106. Maximum allowed is 100.","line":20,"column":1,"nodeType":"Program","messageId":"max","endLine":20,"endColumn":107},{"ruleId":"quote-props","severity":2,"message":"Unnecessarily quoted property 'quotes' found.","line":36,"column":5,"nodeType":"Property","messageId":"unnecessarilyQuotedProperty","endLine":36,"endColumn":57,"fix":{"range":[1257,1265],"text":"quotes"}},{"ruleId":"quote-props","severity":2,"message":"Unnecessarily quoted property 'semi' found.","line":37,"column":5,"nodeType":"Property","messageId":"unnecessarilyQuotedProperty","endLine":37,"endColumn":32,"fix":{"range":[1315,1321],"text":"semi"}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":38,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":38,"endColumn":5,"fix":{"range":[1344,1348],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":54,"column":3,"nodeType":"Program","messageId":"trailingSpace","endLine":54,"endColumn":4,"fix":{"range":[2041,2042],"text":""}},{"ruleId":"eol-last","severity":2,"message":"Newline required at end of file but not found.","line":54,"column":4,"nodeType":"Program","messageId":"missing","fix":{"range":[2042,2042],"text":"\n"}}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":6,"fixableWarningCount":0,"source":"module.exports = {\n  env: {\n    node: true,\n    es2021: true,\n    jest: true,\n  },\n  extends: [\n    'airbnb-base',\n    'plugin:node/recommended',\n    'plugin:promise/recommended',\n  ],\n  plugins: [\n    'security'\n  ],\n  parserOptions: {\n    ecmaVersion: 2021,\n  },\n  rules: {\n    'no-console': ['error', { allow: ['warn', 'error', 'info'] }],\n    'import/no-extraneous-dependencies': ['error', { devDependencies: ['**/*.test.js', '**/*.spec.js'] }],\n    'node/no-unsupported-features/es-syntax': ['error', { ignores: ['modules'] }],\n    'max-len': ['error', { code: 100, ignoreComments: true, ignoreUrls: true }],\n    'no-unused-vars': ['error', { argsIgnorePattern: '^_' }],\n    'no-param-reassign': ['error', { props: false }],\n    'promise/always-return': 'warn',\n    'promise/catch-or-return': 'error',\n    'node/no-unpublished-require': 'off',\n    'comma-dangle': ['error', 'always-multiline'],\n    'arrow-parens': ['error', 'always'],\n    'arrow-body-style': ['error', 'as-needed'],\n    'prefer-destructuring': 'error',\n    'no-use-before-define': ['error', { functions: false, classes: true }],\n    'object-curly-spacing': ['error', 'always'],\n    'eol-last': ['error', 'always'],\n    'no-multiple-empty-lines': ['error', { max: 1, maxEOF: 1 }],\n    'quotes': ['error', 'single', { avoidEscape: true }],\n    'semi': ['error', 'always'],\n    \n    // Security rules\n    'security/detect-buffer-noassert': 'error',\n    'security/detect-child-process': 'error',\n    'security/detect-disable-mustache-escape': 'error',\n    'security/detect-eval-with-expression': 'error',\n    'security/detect-new-buffer': 'error',\n    'security/detect-no-csrf-before-method-override': 'error',\n    'security/detect-non-literal-fs-filename': 'warn',\n    'security/detect-non-literal-regexp': 'warn',\n    'security/detect-non-literal-require': 'warn',\n    'security/detect-object-injection': 'off',\n    'security/detect-possible-timing-attacks': 'error',\n    'security/detect-pseudoRandomBytes': 'error',\n    'security/detect-unsafe-regex': 'error',\n  },\n}; ","usedDeprecatedRules":[{"ruleId":"max-len","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/server/index.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'path' is assigned a value but never used.","line":4,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":11},{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module './routes'.","line":5,"column":24,"nodeType":"Literal","endLine":5,"endColumn":34},{"ruleId":"import/extensions","severity":2,"message":"Missing file extension for \"./routes\"","line":5,"column":24,"nodeType":"Literal","endLine":5,"endColumn":34},{"ruleId":"node/no-missing-require","severity":2,"message":"\"./routes\" is not found.","line":5,"column":24,"nodeType":"Literal","endLine":5,"endColumn":34},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":16,"column":28,"nodeType":"Property","messageId":"missing","endLine":17,"endColumn":1,"fix":{"range":[490,495],"text":"200,\n}"}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":23,"column":23,"nodeType":"Program","messageId":"trailingSpace","endLine":23,"endColumn":24,"fix":{"range":[597,598],"text":""}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":25,"column":43,"nodeType":"Property","messageId":"missing","endLine":26,"endColumn":1,"fix":{"range":[657,660],"text":"],\n}"}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":27,"column":29,"nodeType":"Program","messageId":"trailingSpace","endLine":27,"endColumn":30,"fix":{"range":[692,693],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":28,"column":17,"nodeType":"Program","messageId":"trailingSpace","endLine":28,"endColumn":18,"fix":{"range":[710,711],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":29,"column":17,"nodeType":"Program","messageId":"trailingSpace","endLine":29,"endColumn":18,"fix":{"range":[728,729],"text":""}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":29,"column":17,"nodeType":"Property","messageId":"missing","endLine":29,"endColumn":18,"fix":{"range":[724,731],"text":"true, \n}"}},{"ruleId":"consistent-return","severity":2,"message":"Expected to return a value at the end of arrow function.","line":34,"column":31,"nodeType":"ArrowFunctionExpression","messageId":"missingReturn","endLine":34,"endColumn":33},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":36,"column":34,"nodeType":"Program","messageId":"trailingSpace","endLine":36,"endColumn":35,"fix":{"range":[938,939],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":38,"column":27,"nodeType":"Program","messageId":"trailingSpace","endLine":38,"endColumn":28,"fix":{"range":[995,996],"text":""}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":38,"column":27,"nodeType":"Property","messageId":"missing","endLine":38,"endColumn":28,"fix":{"range":[988,1002],"text":"message, \n    }"}},{"ruleId":"no-unused-vars","severity":2,"message":"'next' is defined but never used. Allowed unused args must match /^_/u.","line":53,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":53,"endColumn":29},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":57,"column":78,"nodeType":"Property","messageId":"missing","endLine":58,"endColumn":1,"fix":{"range":[1382,1395],"text":"undefined,\n  }"}},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":65,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":65,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1528,1574],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":70,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":70,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1665,1724],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"eol-last","severity":2,"message":"Newline required at end of file but not found.","line":82,"column":19,"nodeType":"Program","messageId":"missing","fix":{"range":[1947,1947],"text":"\n"}}],"suppressedMessages":[],"errorCount":20,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":12,"fixableWarningCount":0,"source":"const express = require('express');\nconst cors = require('cors');\nconst morgan = require('morgan');\nconst path = require('path');\nconst routes = require('./routes');\n\nconst app = express();\nconst PORT = process.env.PORT || 3001;\n\n// CORS configuration\nconst corsOptions = {\n  origin: ['http://localhost:3000', 'http://127.0.0.1:3000'],\n  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\n  allowedHeaders: ['Content-Type', 'Authorization'],\n  credentials: true,\n  optionsSuccessStatus: 200\n};\n\n// Middleware\napp.use(cors(corsOptions));\n\n// Increase payload limit to 50mb\napp.use(express.json({ \n  limit: '50mb',\n  type: ['application/json', 'text/plain']\n}));\napp.use(express.urlencoded({ \n  limit: '50mb', \n  extended: true \n}));\napp.use(morgan('dev'));\n\n// Error handling for JSON parsing\napp.use((err, req, res, next) => {\n  if (err instanceof SyntaxError && err.status === 400 && 'body' in err) {\n    return res.status(400).json({ \n      error: 'Invalid JSON',\n      details: err.message \n    });\n  }\n  next();\n});\n\n// API Routes\napp.use('/api', routes);\n\n// Handle 404\napp.use((req, res) => {\n  res.status(404).json({ error: 'Not Found' });\n});\n\n// Global error handler\napp.use((err, req, res, next) => {\n  console.error('Global error:', err);\n  res.status(500).json({\n    error: 'Internal Server Error',\n    details: process.env.NODE_ENV === 'development' ? err.message : undefined\n  });\n});\n\n// Function to try different ports\nconst startServer = (port) => {\n  try {\n    const server = app.listen(port, () => {\n      console.log(`Server running on port ${port}`);\n    });\n\n    server.on('error', (err) => {\n      if (err.code === 'EADDRINUSE') {\n        console.log(`Port ${port} is busy, trying ${port + 1}...`);\n        startServer(port + 1);\n      } else {\n        console.error('Server error:', err);\n      }\n    });\n  } catch (err) {\n    console.error('Failed to start server:', err);\n  }\n};\n\n// Start the server\nstartServer(PORT);","usedDeprecatedRules":[{"ruleId":"max-len","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/server/routes/projects.js","messages":[{"ruleId":"import/newline-after-import","severity":2,"message":"Expected 1 empty line after require statement not followed by another require.","line":1,"column":1,"nodeType":null,"fix":{"range":[35,35],"text":"\n"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":20,"column":35,"nodeType":"CallExpression","messageId":"missing","endLine":21,"endColumn":1,"fix":{"range":[613,620],"text":"),\n    ]"}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":22,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":22,"endColumn":5,"fix":{"range":[622,626],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":24,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":24,"endColumn":5,"fix":{"range":[656,660],"text":""}},{"ruleId":"no-restricted-syntax","severity":2,"message":"iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.","line":25,"column":5,"nodeType":"ForOfStatement","messageId":"restrictedSyntax","endLine":59,"endColumn":6},{"ruleId":"no-await-in-loop","severity":2,"message":"Unexpected `await` inside a loop.","line":28,"column":9,"nodeType":"AwaitExpression","messageId":"unexpectedAwait","endLine":28,"endColumn":36},{"ruleId":"security/detect-non-literal-fs-filename","severity":1,"message":"Found stat from package \"fs\" with non literal argument at index 0","line":28,"column":15,"nodeType":"CallExpression","endLine":28,"endColumn":36},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":29,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":29,"endColumn":9,"fix":{"range":[783,791],"text":""}},{"ruleId":"no-await-in-loop","severity":2,"message":"Unexpected `await` inside a loop.","line":31,"column":23,"nodeType":"AwaitExpression","messageId":"unexpectedAwait","endLine":31,"endColumn":78},{"ruleId":"security/detect-non-literal-fs-filename","severity":1,"message":"Found readdir from package \"fs\" with non literal argument at index 0","line":31,"column":29,"nodeType":"CallExpression","endLine":31,"endColumn":78},{"ruleId":"arrow-parens","severity":2,"message":"Expected parentheses around arrow function argument.","line":33,"column":19,"nodeType":"ArrowFunctionExpression","messageId":"expectedParens","endLine":33,"endColumn":23,"fix":{"range":[949,953],"text":"(item)"}},{"ruleId":"arrow-parens","severity":2,"message":"Expected parentheses around arrow function argument.","line":34,"column":16,"nodeType":"ArrowFunctionExpression","messageId":"expectedParens","endLine":34,"endColumn":20,"fix":{"range":[992,996],"text":"(item)"}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":35,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":35,"endColumn":9,"fix":{"range":[1028,1036],"text":""}},{"ruleId":"no-restricted-syntax","severity":2,"message":"iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.","line":37,"column":9,"nodeType":"ForOfStatement","messageId":"restrictedSyntax","endLine":55,"endColumn":10},{"ruleId":"no-await-in-loop","severity":2,"message":"Unexpected `await` inside a loop.","line":40,"column":13,"nodeType":"AwaitExpression","messageId":"unexpectedAwait","endLine":40,"endColumn":43},{"ruleId":"security/detect-non-literal-fs-filename","severity":1,"message":"Found stat from package \"fs\" with non literal argument at index 0","line":40,"column":19,"nodeType":"CallExpression","endLine":40,"endColumn":43},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":41,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":41,"endColumn":13,"fix":{"range":[1242,1254],"text":""}},{"ruleId":"no-await-in-loop","severity":2,"message":"Unexpected `await` inside a loop.","line":44,"column":28,"nodeType":"AwaitExpression","messageId":"unexpectedAwait","endLine":44,"endColumn":51},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":45,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":45,"endColumn":13,"fix":{"range":[1387,1399],"text":""}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":49,"column":44,"nodeType":"Property","messageId":"missing","endLine":50,"endColumn":1,"fix":{"range":[1532,1549],"text":"),\n              }"}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":60,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":60,"endColumn":5,"fix":{"range":[1741,1745],"text":""}},{"ruleId":"consistent-return","severity":2,"message":"Expected to return a value at the end of async arrow function.","line":79,"column":53,"nodeType":"ArrowFunctionExpression","messageId":"missingReturn","endLine":79,"endColumn":55},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":82,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":82,"endColumn":5,"fix":{"range":[2256,2260],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":86,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":86,"endColumn":5,"fix":{"range":[2365,2369],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":91,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":91,"endColumn":7,"fix":{"range":[2501,2507],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":95,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":95,"endColumn":7,"fix":{"range":[2615,2621],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":99,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":99,"endColumn":7,"fix":{"range":[2729,2735],"text":""}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":104,"column":34,"nodeType":"Property","messageId":"missing","endLine":105,"endColumn":1,"fix":{"range":[2874,2889],"text":"current,\n      }"}},{"ruleId":"consistent-return","severity":2,"message":"Expected to return a value at the end of async arrow function.","line":115,"column":57,"nodeType":"ArrowFunctionExpression","messageId":"missingReturn","endLine":115,"endColumn":59},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":120,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":120,"endColumn":5,"fix":{"range":[3291,3295],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":123,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":123,"endColumn":5,"fix":{"range":[3389,3393],"text":""}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":127,"column":32,"nodeType":"Property","messageId":"missing","endLine":128,"endColumn":1,"fix":{"range":[3516,3529],"text":"current,\n    }"}},{"ruleId":"consistent-return","severity":2,"message":"Expected to return a value at the end of async arrow function.","line":135,"column":43,"nodeType":"ArrowFunctionExpression","messageId":"missingReturn","endLine":135,"endColumn":45},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":138,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":138,"endColumn":5,"fix":{"range":[3744,3748],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":142,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":142,"endColumn":5,"fix":{"range":[3858,3862],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":149,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":149,"endColumn":5,"fix":{"range":[4091,4095],"text":""}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":154,"column":52,"nodeType":"Property","messageId":"missing","endLine":155,"endColumn":1,"fix":{"range":[4207,4214],"text":"),\n    }"}}],"suppressedMessages":[],"errorCount":34,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":25,"fixableWarningCount":0,"source":"const express = require('express');\nconst router = express.Router();\nconst simpleGit = require('simple-git');\nconst path = require('path');\nconst fs = require('fs');\nconst os = require('os');\n\n// Store current project path\nlet currentProjectPath = '';\n\n// Helper function to find git repositories in common directories\nconst findGitRepositories = async () => {\n  try {\n    const homeDir = os.homedir();\n    const commonDirs = [\n      path.join(homeDir, 'Documents'),\n      path.join(homeDir, 'Projects'),\n      path.join(homeDir, 'Development'),\n      path.join(homeDir, 'Code'),\n      path.join(homeDir, 'Github')\n    ];\n    \n    const repositories = [];\n    \n    for (const dir of commonDirs) {\n      try {\n        // Check if directory exists\n        await fs.promises.stat(dir);\n        \n        // Get subdirectories\n        const items = await fs.promises.readdir(dir, { withFileTypes: true });\n        const subdirs = items\n          .filter(item => item.isDirectory())\n          .map(item => path.join(dir, item.name));\n        \n        // Check each subdirectory for .git folder\n        for (const subdir of subdirs) {\n          try {\n            const gitDir = path.join(subdir, '.git');\n            await fs.promises.stat(gitDir);\n            \n            // It's a git repository\n            const git = simpleGit(subdir);\n            const isRepo = await git.checkIsRepo();\n            \n            if (isRepo) {\n              repositories.push({\n                path: subdir,\n                name: path.basename(subdir)\n              });\n            }\n          } catch (err) {\n            // Not a git repository, continue\n          }\n        }\n      } catch (err) {\n        // Directory doesn't exist, continue\n      }\n    }\n    \n    return repositories;\n  } catch (error) {\n    console.error('Error finding repositories:', error);\n    return [];\n  }\n};\n\n// Get list of repositories\nrouter.get('/api/repositories', async (req, res) => {\n  try {\n    const repositories = await findGitRepositories();\n    res.json(repositories);\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// Set current repository\nrouter.post('/api/repository/set', async (req, res) => {\n  try {\n    const { path: repoPath } = req.body;\n    \n    if (!repoPath) {\n      return res.status(400).json({ error: 'Repository path is required' });\n    }\n    \n    // Verify it's a git repository\n    try {\n      const git = simpleGit(repoPath);\n      const isRepo = await git.checkIsRepo();\n      \n      if (!isRepo) {\n        return res.status(400).json({ error: 'Not a valid git repository' });\n      }\n      \n      // Get branches\n      const branches = await git.branchLocal();\n      currentProjectPath = repoPath;\n      \n      res.json({\n        path: repoPath,\n        name: path.basename(repoPath),\n        branches: branches.all,\n        current: branches.current\n      });\n    } catch (error) {\n      return res.status(400).json({ error: 'Invalid repository path' });\n    }\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// Get branches for current repository\nrouter.get('/api/repository/branches', async (req, res) => {\n  try {\n    if (!currentProjectPath) {\n      return res.status(400).json({ error: 'No repository selected' });\n    }\n    \n    const git = simpleGit(currentProjectPath);\n    const branches = await git.branchLocal();\n    \n    res.json({\n      repository: path.basename(currentProjectPath),\n      branches: branches.all,\n      current: branches.current\n    });\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// Get diff between branches\nrouter.post('/api/diff', async (req, res) => {\n  try {\n    const { fromBranch, toBranch } = req.body;\n    \n    if (!currentProjectPath) {\n      return res.status(400).json({ error: 'No repository selected' });\n    }\n    \n    if (!fromBranch || !toBranch) {\n      return res.status(400).json({ error: 'Both branches must be specified' });\n    }\n\n    const git = simpleGit(currentProjectPath);\n    const diff = await git.diff([fromBranch, toBranch]);\n    \n    res.json({\n      diff,\n      fromBranch,\n      toBranch,\n      repository: path.basename(currentProjectPath)\n    });\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\nmodule.exports = router;\n","usedDeprecatedRules":[{"ruleId":"max-len","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/server/scripts/lint.js","messages":[{"ruleId":"node/shebang","severity":2,"message":"This file needs no shebang.","line":8,"column":1,"nodeType":"Program","endLine":215,"endColumn":42,"fix":{"range":[0,20],"text":""}},{"ruleId":"no-process-exit","severity":2,"message":"Don't use process.exit(); throw an error instead.","line":26,"column":3,"nodeType":"CallExpression","messageId":"noProcessExit","endLine":26,"endColumn":18},{"ruleId":"max-len","severity":2,"message":"This line has a length of 111. Maximum allowed is 100.","line":37,"column":1,"nodeType":"Program","messageId":"max","endLine":37,"endColumn":112},{"ruleId":"arrow-parens","severity":2,"message":"Expected parentheses around arrow function argument.","line":41,"column":17,"nodeType":"ArrowFunctionExpression","messageId":"expectedParens","endLine":41,"endColumn":21,"fix":{"range":[1160,1164],"text":"(file)"}},{"ruleId":"arrow-parens","severity":2,"message":"Expected parentheses around arrow function argument.","line":41,"column":47,"nodeType":"ArrowFunctionExpression","messageId":"expectedParens","endLine":41,"endColumn":54,"fix":{"range":[1190,1197],"text":"(pattern)"}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":43,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":43,"endColumn":5,"fix":{"range":[1233,1237],"text":""}},{"ruleId":"arrow-parens","severity":2,"message":"Expected parentheses around arrow function argument.","line":46,"column":58,"nodeType":"ArrowFunctionExpression","messageId":"expectedParens","endLine":46,"endColumn":59,"fix":{"range":[1348,1349],"text":"(p)"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":47,"column":27,"nodeType":"ObjectExpression","messageId":"missing","endLine":48,"endColumn":1,"fix":{"range":[1416,1423],"text":"},\n    )"}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":49,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":49,"endColumn":5,"fix":{"range":[1425,1429],"text":""}},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":64,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":64,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1759,1805],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"object-curly-newline","severity":2,"message":"Expected a line break after this opening brace.","line":65,"column":12,"nodeType":"ObjectExpression","messageId":"expectedLinebreakAfterOpeningBrace","endLine":65,"endColumn":13,"fix":{"range":[1818,1818],"text":"\n"}},{"ruleId":"object-curly-newline","severity":2,"message":"Expected a line break before this closing brace.","line":65,"column":72,"nodeType":"ObjectExpression","messageId":"expectedLinebreakBeforeClosingBrace","endLine":65,"endColumn":73,"fix":{"range":[1877,1877],"text":"\n"}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":71,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":71,"endColumn":3,"fix":{"range":[2043,2045],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":75,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":75,"endColumn":5,"fix":{"range":[2154,2158],"text":""}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":83,"column":41,"nodeType":"ObjectExpression","messageId":"missing","endLine":84,"endColumn":1,"fix":{"range":[2417,2424],"text":"},\n    )"}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":85,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":85,"endColumn":5,"fix":{"range":[2426,2430],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":86,"column":13,"nodeType":"Program","messageId":"trailingSpace","endLine":86,"endColumn":14,"fix":{"range":[2443,2444],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":87,"column":39,"nodeType":"Program","messageId":"trailingSpace","endLine":87,"endColumn":40,"fix":{"range":[2483,2484],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":88,"column":14,"nodeType":"Program","messageId":"trailingSpace","endLine":88,"endColumn":15,"fix":{"range":[2498,2499],"text":""}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":90,"column":15,"nodeType":"SpreadElement","messageId":"missing","endLine":91,"endColumn":1,"fix":{"range":[2524,2535],"text":"stats,\n    }"}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":96,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":96,"endColumn":7,"fix":{"range":[2678,2684],"text":""}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":104,"column":43,"nodeType":"ObjectExpression","messageId":"missing","endLine":105,"endColumn":1,"fix":{"range":[2959,2968],"text":"},\n      )"}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":106,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":106,"endColumn":7,"fix":{"range":[2970,2976],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":107,"column":15,"nodeType":"Program","messageId":"trailingSpace","endLine":107,"endColumn":16,"fix":{"range":[2991,2992],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":108,"column":24,"nodeType":"Program","messageId":"trailingSpace","endLine":108,"endColumn":25,"fix":{"range":[3016,3017],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":109,"column":30,"nodeType":"Program","messageId":"trailingSpace","endLine":109,"endColumn":31,"fix":{"range":[3047,3048],"text":""}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":111,"column":17,"nodeType":"SpreadElement","messageId":"missing","endLine":112,"endColumn":1,"fix":{"range":[3077,3090],"text":"stats,\n      }"}},{"ruleId":"object-curly-newline","severity":2,"message":"Expected a line break after this opening brace.","line":116,"column":14,"nodeType":"ObjectExpression","messageId":"expectedLinebreakAfterOpeningBrace","endLine":116,"endColumn":15,"fix":{"range":[3269,3269],"text":"\n"}},{"ruleId":"object-curly-newline","severity":2,"message":"Expected a line break before this closing brace.","line":116,"column":86,"nodeType":"ObjectExpression","messageId":"expectedLinebreakBeforeClosingBrace","endLine":116,"endColumn":87,"fix":{"range":[3340,3340],"text":"\n"}},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":127,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":127,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3543,3595],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":128,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":128,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3598,3656],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":129,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":129,"endColumn":3,"fix":{"range":[3657,3659],"text":""}},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":131,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":131,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3756,3810],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":134,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":134,"endColumn":3,"fix":{"range":[3827,3829],"text":""}},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":135,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":135,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3832,3891],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":136,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":136,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3894,3960],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":137,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":137,"endColumn":3,"fix":{"range":[3961,3963],"text":""}},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":139,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":139,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3997,4053],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":142,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":142,"endColumn":3,"fix":{"range":[4070,4072],"text":""}},{"ruleId":"arrow-parens","severity":2,"message":"Expected parentheses around arrow function argument.","line":145,"column":13,"nodeType":"ArrowFunctionExpression","messageId":"expectedParens","endLine":145,"endColumn":17,"fix":{"range":[4151,4155],"text":"(file)"}},{"ruleId":"arrow-parens","severity":2,"message":"Expected parentheses around arrow function argument.","line":146,"column":10,"nodeType":"ArrowFunctionExpression","messageId":"expectedParens","endLine":146,"endColumn":14,"fix":{"range":[4194,4198],"text":"(file)"}},{"ruleId":"arrow-parens","severity":2,"message":"Expected parentheses around arrow function argument.","line":148,"column":43,"nodeType":"ArrowFunctionExpression","messageId":"expectedParens","endLine":148,"endColumn":46,"fix":{"range":[4318,4321],"text":"(msg)"}},{"ruleId":"arrow-parens","severity":2,"message":"Expected parentheses around arrow function argument.","line":149,"column":45,"nodeType":"ArrowFunctionExpression","messageId":"expectedParens","endLine":149,"endColumn":48,"fix":{"range":[4390,4393],"text":"(msg)"}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":150,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":150,"endColumn":7,"fix":{"range":[4418,4424],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":158,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":158,"endColumn":3,"fix":{"range":[4582,4584],"text":""}},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":160,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":160,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4622,4680],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":163,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":163,"endColumn":3,"fix":{"range":[4697,4699],"text":""}},{"ruleId":"arrow-parens","severity":2,"message":"Expected parentheses around arrow function argument.","line":165,"column":22,"nodeType":"ArrowFunctionExpression","messageId":"expectedParens","endLine":165,"endColumn":26,"fix":{"range":[4749,4753],"text":"(file)"}},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":166,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":166,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4763,4810],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"max-len","severity":2,"message":"This line has a length of 119. Maximum allowed is 100.","line":167,"column":1,"nodeType":"Program","messageId":"max","endLine":167,"endColumn":120},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":167,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":167,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4815,4930],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":168,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":168,"endColumn":5,"fix":{"range":[4931,4935],"text":""}},{"ruleId":"arrow-parens","severity":2,"message":"Expected parentheses around arrow function argument.","line":169,"column":27,"nodeType":"ArrowFunctionExpression","messageId":"expectedParens","endLine":169,"endColumn":30,"fix":{"range":[4962,4965],"text":"(msg)"}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":171,"column":42,"nodeType":"Program","messageId":"trailingSpace","endLine":171,"endColumn":43,"fix":{"range":[5064,5065],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":172,"column":29,"nodeType":"Program","messageId":"trailingSpace","endLine":172,"endColumn":30,"fix":{"range":[5094,5095],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":175,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":175,"endColumn":7,"fix":{"range":[5201,5207],"text":""}},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":176,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":176,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5214,5293],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":179,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":179,"endColumn":3,"fix":{"range":[5308,5310],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":186,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":186,"endColumn":3,"fix":{"range":[5554,5556],"text":""}},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":188,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":188,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5591,5635],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":190,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":190,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5685,5742],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":193,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":193,"endColumn":3,"fix":{"range":[5755,5757],"text":""}},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":196,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":196,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5841,5916],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":197,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":197,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5921,5977],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":202,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":202,"endColumn":12,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6003,6048],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":203,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":203,"endColumn":12,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6049,6120],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":204,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":204,"endColumn":12,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6121,6184],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":212,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":212,"endColumn":12,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6384,6447],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-process-exit","severity":2,"message":"Don't use process.exit(); throw an error instead.","line":215,"column":1,"nodeType":"CallExpression","messageId":"noProcessExit","endLine":215,"endColumn":41},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":215,"column":42,"nodeType":"Program","messageId":"trailingSpace","endLine":215,"endColumn":43,"fix":{"range":[6520,6521],"text":""}},{"ruleId":"eol-last","severity":2,"message":"Newline required at end of file but not found.","line":215,"column":43,"nodeType":"Program","messageId":"missing","fix":{"range":[6521,6521],"text":"\n"}}],"suppressedMessages":[],"errorCount":71,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":48,"fixableWarningCount":0,"source":"#!/usr/bin/env node\n\n/**\n * Advanced linting script with detailed reporting\n * Run with: node scripts/lint.js [--fix] [--staged]\n */\n\nconst { execSync } = require('child_process');\nconst chalk = require('chalk');\nconst _ = require('lodash');\nconst path = require('path');\nconst fs = require('fs');\n\n// Parse command line arguments\nconst args = process.argv.slice(2);\nconst shouldFix = args.includes('--fix');\nconst stagedOnly = args.includes('--staged');\n\n// Configuration\nconst ESLINT_CONFIG_PATH = path.resolve(__dirname, '..', '.eslintrc.js');\nconst IGNORE_PATTERNS = ['node_modules', 'dist', 'build', 'coverage', '.git'];\n\n// Ensure ESLint config exists\nif (!fs.existsSync(ESLINT_CONFIG_PATH)) {\n  console.error(chalk.red('Error: ESLint config not found at', ESLINT_CONFIG_PATH));\n  process.exit(1);\n}\n\n/**\n * Get files to lint\n * @returns {string[]} Array of file paths\n */\nfunction getFilesToLint() {\n  try {\n    if (stagedOnly) {\n      // Get staged JS files\n      const output = execSync('git diff --cached --name-only --diff-filter=ACMR \"*.js\"', { encoding: 'utf8' });\n      return output\n        .split('\\n')\n        .filter(Boolean)\n        .filter(file => !IGNORE_PATTERNS.some(pattern => file.includes(pattern)));\n    }\n    \n    // Get all JS files\n    const output = execSync(\n      `find . -type f -name \"*.js\" ${IGNORE_PATTERNS.map(p => `-not -path \"*/${p}/*\"`).join(' ')}`,\n      { encoding: 'utf8' }\n    );\n    \n    return output.split('\\n').filter(Boolean);\n  } catch (error) {\n    console.error(chalk.red('Error getting files to lint:'), error.message);\n    return [];\n  }\n}\n\n/**\n * Run ESLint on files\n * @param {string[]} files - Files to lint\n * @returns {Object} Lint results\n */\nfunction runEslint(files) {\n  if (!files.length) {\n    console.log(chalk.yellow('No files to lint'));\n    return { success: true, output: '', errorCount: 0, warningCount: 0 };\n  }\n\n  const fixFlag = shouldFix ? '--fix' : '';\n  const formatFlag = '--format json';\n  const command = `npx eslint ${fixFlag} ${formatFlag} ${files.join(' ')}`;\n  \n  try {\n    const output = execSync(command, { encoding: 'utf8' });\n    const results = JSON.parse(output);\n    \n    // Calculate total errors and warnings\n    const stats = results.reduce(\n      (acc, file) => {\n        acc.errorCount += file.errorCount;\n        acc.warningCount += file.warningCount;\n        return acc;\n      },\n      { errorCount: 0, warningCount: 0 }\n    );\n    \n    return { \n      success: stats.errorCount === 0, \n      output, \n      results,\n      ...stats\n    };\n  } catch (error) {\n    // ESLint returns non-zero exit code when there are errors\n    try {\n      const results = JSON.parse(error.stdout);\n      \n      // Calculate total errors and warnings\n      const stats = results.reduce(\n        (acc, file) => {\n          acc.errorCount += file.errorCount;\n          acc.warningCount += file.warningCount;\n          return acc;\n        },\n        { errorCount: 0, warningCount: 0 }\n      );\n      \n      return { \n        success: false, \n        output: error.stdout, \n        results,\n        ...stats\n      };\n    } catch (parseError) {\n      console.error(chalk.red('Error parsing ESLint output:'), parseError.message);\n      console.error(error.stdout || error.message);\n      return { success: false, output: error.message, errorCount: 1, warningCount: 0 };\n    }\n  }\n}\n\n/**\n * Format and display lint results\n * @param {Object} lintResult - Lint results\n * @param {string[]} files - Files that were linted\n */\nfunction displayResults(lintResult, files) {\n  console.log(chalk.bold('\\n=== ESLint Results ==='));\n  console.log(`Files checked: ${chalk.cyan(files.length)}`);\n  \n  if (lintResult.success && lintResult.errorCount === 0 && lintResult.warningCount === 0) {\n    console.log(chalk.green('✓ All files pass linting!'));\n    return;\n  }\n  \n  console.log(`Errors: ${chalk.red(lintResult.errorCount)}`);\n  console.log(`Warnings: ${chalk.yellow(lintResult.warningCount)}`);\n  \n  if (!lintResult.results) {\n    console.log(chalk.red('No detailed results available'));\n    return;\n  }\n  \n  // Group issues by file\n  const fileIssues = lintResult.results\n    .filter(file => file.messages.length > 0)\n    .map(file => {\n      const relativePath = path.relative(process.cwd(), file.filePath);\n      const errors = file.messages.filter(msg => msg.severity === 2);\n      const warnings = file.messages.filter(msg => msg.severity === 1);\n      \n      return {\n        path: relativePath,\n        errors,\n        warnings,\n        messages: _.sortBy(file.messages, ['line', 'column']),\n      };\n    });\n  \n  if (fileIssues.length === 0) {\n    console.log(chalk.green('No issues found in any files!'));\n    return;\n  }\n  \n  // Display issues by file\n  fileIssues.forEach(file => {\n    console.log(`\\n${chalk.underline(file.path)}`);\n    console.log(`  ${chalk.red(`${file.errors.length} errors`)}, ${chalk.yellow(`${file.warnings.length} warnings`)}`);\n    \n    file.messages.forEach(msg => {\n      const location = `${msg.line}:${msg.column}`;\n      const severity = msg.severity === 2 \n        ? chalk.red('error') \n        : chalk.yellow('warning');\n      const ruleId = msg.ruleId ? chalk.gray(`(${msg.ruleId})`) : '';\n      \n      console.log(`  ${chalk.cyan(location)} ${severity}: ${msg.message} ${ruleId}`);\n    });\n  });\n  \n  // Summary of most common issues\n  const allMessages = _.flatMap(fileIssues, 'messages');\n  const ruleStats = _.countBy(allMessages, 'ruleId');\n  const topIssues = Object.entries(ruleStats)\n    .sort((a, b) => b[1] - a[1])\n    .slice(0, 5);\n  \n  if (topIssues.length > 0) {\n    console.log('\\n=== Most Common Issues ===');\n    topIssues.forEach(([rule, count]) => {\n      console.log(`${chalk.cyan(rule)}: ${count} occurrences`);\n    });\n  }\n  \n  // Provide fix instructions\n  if (lintResult.errorCount > 0 && !shouldFix) {\n    console.log(chalk.bold.yellow('\\nTo automatically fix some issues, run:'));\n    console.log(chalk.cyan('  node scripts/lint.js --fix'));\n  }\n}\n\n// Main execution\nconsole.log(chalk.bold('Running ESLint...'));\nconsole.log(`Mode: ${stagedOnly ? 'Staged files only' : 'All files'}`);\nconsole.log(`Auto-fix: ${shouldFix ? 'Enabled' : 'Disabled'}`);\n\nconst startTime = Date.now();\nconst files = getFilesToLint();\nconst lintResult = runEslint(files);\nconst duration = ((Date.now() - startTime) / 1000).toFixed(2);\n\ndisplayResults(lintResult, files);\nconsole.log(chalk.gray(`\\nLinting completed in ${duration}s`));\n\n// Exit with appropriate code\nprocess.exit(lintResult.success ? 0 : 1); ","usedDeprecatedRules":[{"ruleId":"max-len","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/server/server.js","messages":[{"ruleId":"no-process-exit","severity":2,"message":"Don't use process.exit(); throw an error instead.","line":23,"column":22,"nodeType":"CallExpression","messageId":"noProcessExit","endLine":23,"endColumn":37},{"ruleId":"no-process-exit","severity":2,"message":"Don't use process.exit(); throw an error instead.","line":30,"column":22,"nodeType":"CallExpression","messageId":"noProcessExit","endLine":30,"endColumn":37}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Local CodeRabbit Server\n * Main entry point for the Express server\n */\n\n// Load environment variables\nrequire('dotenv').config();\n\nconst app = require('./src/app');\nconst config = require('./src/config');\nconst logger = require('./src/utils/logger');\n\n// Start the server\nconst server = app.listen(config.port, () => {\n  logger.info(`Server running in ${config.nodeEnv} mode on port ${config.port}`);\n  logger.info(`API available at http://localhost:${config.port}`);\n});\n\n// Handle unhandled promise rejections\nprocess.on('unhandledRejection', (err) => {\n  logger.error('Unhandled Promise Rejection:', err);\n  // Close server & exit process\n  server.close(() => process.exit(1));\n});\n\n// Handle uncaught exceptions\nprocess.on('uncaughtException', (err) => {\n  logger.error('Uncaught Exception:', err);\n  // Close server & exit process\n  server.close(() => process.exit(1));\n});\n\n// Handle SIGTERM\nprocess.on('SIGTERM', () => {\n  logger.info('SIGTERM received. Shutting down gracefully');\n  server.close(() => {\n    logger.info('Process terminated');\n  });\n});\n\nmodule.exports = server;\n","usedDeprecatedRules":[{"ruleId":"max-len","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/server/src/app.js","messages":[{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":34,"column":52,"nodeType":"Property","messageId":"missing","endLine":35,"endColumn":1,"fix":{"range":[946,951],"text":"),\n  }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":35,"column":4,"nodeType":"Property","messageId":"missing","endLine":36,"endColumn":1,"fix":{"range":[950,953],"text":"},\n}"}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":52,"column":22,"nodeType":"Program","messageId":"trailingSpace","endLine":52,"endColumn":23,"fix":{"range":[1247,1248],"text":""}},{"ruleId":"eol-last","severity":2,"message":"Newline required at end of file but not found.","line":52,"column":23,"nodeType":"Program","messageId":"missing","fix":{"range":[1248,1248],"text":"\n"}}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":4,"fixableWarningCount":0,"source":"const express = require('express');\nconst helmet = require('helmet');\nconst morgan = require('morgan');\nconst path = require('path');\nconst fs = require('fs');\nconst corsMiddleware = require('./middleware/cors');\nconst requestLogger = require('./middleware/requestLogger');\nconst errorHandler = require('./middleware/errorHandler');\nconst routes = require('./routes');\nconst logger = require('./utils/logger');\n\n// Create Express app\nconst app = express();\n\n// Create logs directory if it doesn't exist\nconst logsDir = path.join(__dirname, '..', 'logs');\nif (!fs.existsSync(logsDir)) {\n  fs.mkdirSync(logsDir);\n}\n\n// Security middleware\napp.use(helmet());\n\n// CORS middleware\napp.use(corsMiddleware);\n\n// Body parsing middleware\napp.use(express.json({ limit: '50mb' }));\napp.use(express.urlencoded({ extended: true, limit: '50mb' }));\n\n// HTTP request logging\napp.use(morgan('dev', {\n  stream: {\n    write: (message) => logger.http(message.trim())\n  }\n}));\n\n// Custom request logger\napp.use(requestLogger);\n\n// API routes\napp.use(routes);\n\n// 404 handler\napp.use((req, res) => {\n  res.status(404).json({ error: 'Not Found', message: `Route ${req.method} ${req.url} not found` });\n});\n\n// Error handler\napp.use(errorHandler);\n\nmodule.exports = app; ","usedDeprecatedRules":[{"ruleId":"max-len","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/server/src/config/index.js","messages":[{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":8,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":8,"endColumn":3,"fix":{"range":[171,173],"text":""}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":14,"column":22,"nodeType":"Property","messageId":"missing","endLine":15,"endColumn":1,"fix":{"range":[449,457],"text":"true,\n  }"}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":16,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":16,"endColumn":3,"fix":{"range":[459,461],"text":""}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":19,"column":45,"nodeType":"Property","messageId":"missing","endLine":20,"endColumn":1,"fix":{"range":[526,541],"text":"'db.sqlite',\n  }"}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":21,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":21,"endColumn":3,"fix":{"range":[543,545],"text":""}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":24,"column":59,"nodeType":"Property","messageId":"missing","endLine":25,"endColumn":1,"fix":{"range":[618,635],"text":"'.state.json',\n  }"}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":26,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":26,"endColumn":3,"fix":{"range":[637,639],"text":""}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":29,"column":43,"nodeType":"Property","messageId":"missing","endLine":30,"endColumn":1,"fix":{"range":[711,721],"text":"'info',\n  }"}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":31,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":31,"endColumn":3,"fix":{"range":[723,725],"text":""}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":35,"column":72,"nodeType":"Property","messageId":"missing","endLine":36,"endColumn":1,"fix":{"range":[870,878],"text":"true,\n  }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":36,"column":4,"nodeType":"Property","messageId":"missing","endLine":37,"endColumn":1,"fix":{"range":[877,880],"text":"},\n}"}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":39,"column":25,"nodeType":"Program","messageId":"trailingSpace","endLine":39,"endColumn":26,"fix":{"range":[907,908],"text":""}},{"ruleId":"eol-last","severity":2,"message":"Newline required at end of file but not found.","line":39,"column":26,"nodeType":"Program","messageId":"missing","fix":{"range":[908,908],"text":"\n"}}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":13,"fixableWarningCount":0,"source":"/**\n * Configuration settings for the server\n */\nconst config = {\n  // Server settings\n  port: process.env.PORT || 3001,\n  nodeEnv: process.env.NODE_ENV || 'development',\n  \n  // CORS settings\n  cors: {\n    origin: process.env.CORS_ORIGIN || ['http://localhost:3000', 'http://127.0.0.1:3000', 'http://localhost:5173'],\n    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\n    allowedHeaders: ['Content-Type', 'Authorization'],\n    credentials: true\n  },\n  \n  // Database settings\n  db: {\n    path: process.env.DB_PATH || 'db.sqlite'\n  },\n  \n  // Git settings\n  git: {\n    statePath: process.env.GIT_STATE_PATH || '.state.json'\n  },\n  \n  // Logging settings\n  logging: {\n    level: process.env.LOG_LEVEL || 'info'\n  },\n  \n  // AI settings\n  ai: {\n    geminiApiKey: process.env.GEMINI_API_KEY || '',\n    enableAiFeatures: process.env.ENABLE_AI_FEATURES === 'true' || true\n  }\n};\n\nmodule.exports = config; ","usedDeprecatedRules":[{"ruleId":"max-len","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/server/src/controllers/diffController.js","messages":[{"ruleId":"arrow-parens","severity":2,"message":"Expected parentheses around arrow function argument.","line":10,"column":29,"nodeType":"ArrowFunctionExpression","messageId":"expectedParens","endLine":10,"endColumn":37,"fix":{"range":[325,333],"text":"(repoPath)"}},{"ruleId":"promise/always-return","severity":1,"message":"Each then() should return a value or throw","line":11,"column":3,"nodeType":"IfStatement","messageId":"thenShouldReturnOrThrow","endLine":13,"endColumn":4},{"ruleId":"arrow-parens","severity":2,"message":"Expected parentheses around arrow function argument.","line":14,"column":10,"nodeType":"ArrowFunctionExpression","messageId":"expectedParens","endLine":14,"endColumn":13,"fix":{"range":[413,416],"text":"(err)"}},{"ruleId":"consistent-return","severity":2,"message":"Expected to return a value at the end of async arrow function.","line":23,"column":36,"nodeType":"ArrowFunctionExpression","messageId":"missingReturn","endLine":23,"endColumn":38},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":26,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":26,"endColumn":5,"fix":{"range":[714,718],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":30,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":30,"endColumn":5,"fix":{"range":[829,833],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":37,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":37,"endColumn":5,"fix":{"range":[1056,1060],"text":""}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":42,"column":38,"nodeType":"Property","messageId":"missing","endLine":43,"endColumn":1,"fix":{"range":[1151,1165],"text":"repoPath,\n    }"}},{"ruleId":"consistent-return","severity":2,"message":"Expected to return a value at the end of async arrow function.","line":55,"column":40,"nodeType":"ArrowFunctionExpression","messageId":"missingReturn","endLine":55,"endColumn":42},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":58,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":58,"endColumn":5,"fix":{"range":[1568,1572],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":62,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":62,"endColumn":5,"fix":{"range":[1683,1687],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":69,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":69,"endColumn":5,"fix":{"range":[1910,1914],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":72,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":72,"endColumn":5,"fix":{"range":[2001,2005],"text":""}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":77,"column":38,"nodeType":"Property","messageId":"missing","endLine":78,"endColumn":1,"fix":{"range":[2100,2114],"text":"repoPath,\n    }"}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":83,"column":3,"nodeType":"Program","messageId":"trailingSpace","endLine":83,"endColumn":4,"fix":{"range":[2280,2281],"text":""}},{"ruleId":"eol-last","severity":2,"message":"Newline required at end of file but not found.","line":83,"column":4,"nodeType":"Program","messageId":"missing","fix":{"range":[2281,2281],"text":"\n"}}],"suppressedMessages":[],"errorCount":15,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":13,"fixableWarningCount":0,"source":"const GitService = require('../services/GitService');\nconst AnalyzerService = require('../services/AnalyzerService');\nconst logger = require('../utils/logger');\n\n// Create service instances\nconst gitService = new GitService();\nconst analyzerService = new AnalyzerService();\n\n// Load initial state\ngitService.loadState().then(repoPath => {\n  if (repoPath) {\n    analyzerService.setRepoPath(repoPath);\n  }\n}).catch(err => {\n  logger.error('Failed to load initial state:', err);\n});\n\n/**\n * Get diff between two branches\n * @param {Object} req - Express request object\n * @param {Object} res - Express response object\n */\nexports.getDiff = async (req, res) => {\n  try {\n    const { fromBranch, toBranch } = req.body;\n    \n    if (!gitService.repoPath) {\n      return res.status(400).json({ error: 'No repository selected' });\n    }\n    \n    if (!fromBranch || !toBranch) {\n      return res.status(400).json({ error: 'Both branches must be specified' });\n    }\n\n    // Get diff between branches\n    const diff = await gitService.getDiff(fromBranch, toBranch);\n    \n    res.json({\n      diff,\n      fromBranch,\n      toBranch,\n      repository: gitService.repoPath\n    });\n  } catch (error) {\n    logger.error('Error getting diff:', error);\n    res.status(500).json({ error: 'Failed to get diff', details: error.message });\n  }\n};\n\n/**\n * Analyze diff between two branches\n * @param {Object} req - Express request object\n * @param {Object} res - Express response object\n */\nexports.analyzeDiff = async (req, res) => {\n  try {\n    const { fromBranch, toBranch } = req.body;\n    \n    if (!gitService.repoPath) {\n      return res.status(400).json({ error: 'No repository selected' });\n    }\n    \n    if (!fromBranch || !toBranch) {\n      return res.status(400).json({ error: 'Both branches must be specified' });\n    }\n\n    // Get diff between branches\n    const diff = await gitService.getDiff(fromBranch, toBranch);\n    \n    // Analyze the diff\n    const analysis = await analyzerService.analyzeDiff(diff);\n    \n    res.json({\n      analysis,\n      fromBranch,\n      toBranch,\n      repository: gitService.repoPath\n    });\n  } catch (error) {\n    logger.error('Error analyzing diff:', error);\n    res.status(500).json({ error: 'Failed to analyze diff', details: error.message });\n  }\n}; ","usedDeprecatedRules":[{"ruleId":"max-len","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/server/src/controllers/repositoryController.js","messages":[{"ruleId":"arrow-parens","severity":2,"message":"Expected parentheses around arrow function argument.","line":9,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"expectedParens","endLine":9,"endColumn":33,"fix":{"range":[249,252],"text":"(err)"}},{"ruleId":"consistent-return","severity":2,"message":"Expected to return a value at the end of async arrow function.","line":33,"column":42,"nodeType":"ArrowFunctionExpression","messageId":"missingReturn","endLine":33,"endColumn":44},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":36,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":36,"endColumn":5,"fix":{"range":[997,1001],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":40,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":40,"endColumn":5,"fix":{"range":[1106,1110],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":43,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":43,"endColumn":5,"fix":{"range":[1176,1180],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":49,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":49,"endColumn":5,"fix":{"range":[1369,1373],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":53,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":53,"endColumn":5,"fix":{"range":[1510,1514],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":56,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":56,"endColumn":5,"fix":{"range":[1567,1571],"text":""}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":61,"column":29,"nodeType":"Property","messageId":"missing","endLine":62,"endColumn":1,"fix":{"range":[1697,1716],"text":"currentBranch,\n    }"}},{"ruleId":"consistent-return","severity":2,"message":"Expected to return a value at the end of async arrow function.","line":74,"column":40,"nodeType":"ArrowFunctionExpression","messageId":"missingReturn","endLine":74,"endColumn":42},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":79,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":79,"endColumn":5,"fix":{"range":[2196,2200],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":82,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":82,"endColumn":5,"fix":{"range":[2317,2321],"text":""}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":86,"column":29,"nodeType":"Property","messageId":"missing","endLine":87,"endColumn":1,"fix":{"range":[2442,2461],"text":"currentBranch,\n    }"}},{"ruleId":"consistent-return","severity":2,"message":"Expected to return a value at the end of async arrow function.","line":99,"column":46,"nodeType":"ArrowFunctionExpression","messageId":"missingReturn","endLine":99,"endColumn":48},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":104,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":104,"endColumn":5,"fix":{"range":[2935,2939],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":107,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":107,"endColumn":5,"fix":{"range":[3056,3060],"text":""}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":112,"column":29,"nodeType":"Property","messageId":"missing","endLine":113,"endColumn":1,"fix":{"range":[3208,3227],"text":"currentBranch,\n    }"}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":118,"column":3,"nodeType":"Program","messageId":"trailingSpace","endLine":118,"endColumn":4,"fix":{"range":[3409,3410],"text":""}},{"ruleId":"eol-last","severity":2,"message":"Newline required at end of file but not found.","line":118,"column":4,"nodeType":"Program","messageId":"missing","fix":{"range":[3410,3410],"text":"\n"}}],"suppressedMessages":[],"errorCount":19,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":16,"fixableWarningCount":0,"source":"const path = require('path');\nconst GitService = require('../services/GitService');\nconst logger = require('../utils/logger');\n\n// Create a GitService instance\nconst gitService = new GitService();\n\n// Load initial state\ngitService.loadState().catch(err => {\n  logger.error('Failed to load initial state:', err);\n});\n\n/**\n * Get list of repositories\n * @param {Object} req - Express request object\n * @param {Object} res - Express response object\n */\nexports.getRepositories = async (req, res) => {\n  try {\n    const repositories = await gitService.findRepositories();\n    res.json(repositories);\n  } catch (error) {\n    logger.error('Error getting repositories:', error);\n    res.status(500).json({ error: 'Failed to get repositories', details: error.message });\n  }\n};\n\n/**\n * Set current repository\n * @param {Object} req - Express request object\n * @param {Object} res - Express response object\n */\nexports.setRepository = async (req, res) => {\n  try {\n    const { path: repoPath } = req.body;\n    \n    if (!repoPath) {\n      return res.status(400).json({ error: 'Repository path is required' });\n    }\n    \n    // Set repository path\n    gitService.setRepoPath(repoPath);\n    \n    // Verify it's a git repository\n    const isRepo = await gitService.isValidRepo();\n    if (!isRepo) {\n      return res.status(400).json({ error: 'Not a valid git repository' });\n    }\n    \n    // Get branches\n    const branches = await gitService.getBranches();\n    const currentBranch = await gitService.getCurrentBranch();\n    \n    // Save state\n    await gitService.saveState();\n    \n    res.json({\n      path: repoPath,\n      name: path.basename(repoPath),\n      branches: branches.all || [],\n      current: currentBranch\n    });\n  } catch (error) {\n    logger.error('Error setting repository:', error);\n    res.status(500).json({ error: 'Failed to set repository', details: error.message });\n  }\n};\n\n/**\n * Get branches for current repository\n * @param {Object} req - Express request object\n * @param {Object} res - Express response object\n */\nexports.getBranches = async (req, res) => {\n  try {\n    if (!gitService.repoPath) {\n      return res.status(400).json({ error: 'No repository selected' });\n    }\n    \n    const branches = await gitService.getBranches();\n    const currentBranch = await gitService.getCurrentBranch();\n    \n    res.json({\n      repository: path.basename(gitService.repoPath),\n      branches: branches.all || [],\n      current: currentBranch\n    });\n  } catch (error) {\n    logger.error('Error getting branches:', error);\n    res.status(500).json({ error: 'Failed to get branches', details: error.message });\n  }\n};\n\n/**\n * Get current repository info\n * @param {Object} req - Express request object\n * @param {Object} res - Express response object\n */\nexports.getRepositoryInfo = async (req, res) => {\n  try {\n    if (!gitService.repoPath) {\n      return res.status(400).json({ error: 'No repository selected' });\n    }\n    \n    const branches = await gitService.getBranches();\n    const currentBranch = await gitService.getCurrentBranch();\n    \n    res.json({\n      path: gitService.repoPath,\n      name: path.basename(gitService.repoPath),\n      branches: branches.all || [],\n      current: currentBranch\n    });\n  } catch (error) {\n    logger.error('Error getting repository info:', error);\n    res.status(500).json({ error: 'Failed to get repository info', details: error.message });\n  }\n}; ","usedDeprecatedRules":[{"ruleId":"max-len","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/server/src/middleware/cors.js","messages":[{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":12,"column":28,"nodeType":"Property","messageId":"missing","endLine":13,"endColumn":1,"fix":{"range":[311,316],"text":"200,\n}"}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":15,"column":33,"nodeType":"Program","messageId":"trailingSpace","endLine":15,"endColumn":34,"fix":{"range":[352,353],"text":""}},{"ruleId":"eol-last","severity":2,"message":"Newline required at end of file but not found.","line":15,"column":34,"nodeType":"Program","messageId":"missing","fix":{"range":[353,353],"text":"\n"}}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"const cors = require('cors');\nconst config = require('../config');\n\n/**\n * CORS middleware configuration\n */\nconst corsMiddleware = cors({\n  origin: config.cors.origin,\n  methods: config.cors.methods,\n  allowedHeaders: config.cors.allowedHeaders,\n  credentials: config.cors.credentials,\n  optionsSuccessStatus: 200\n});\n\nmodule.exports = corsMiddleware; ","usedDeprecatedRules":[{"ruleId":"max-len","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/server/src/middleware/errorHandler.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'next' is defined but never used. Allowed unused args must match /^_/u.","line":11,"column":38,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":42},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":17,"column":23,"nodeType":"Property","messageId":"missing","endLine":18,"endColumn":1,"fix":{"range":[488,498],"text":"method,\n  }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":24,"column":68,"nodeType":"Property","messageId":"missing","endLine":25,"endColumn":1,"fix":{"range":[746,759],"text":"undefined,\n  }"}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":28,"column":31,"nodeType":"Program","messageId":"trailingSpace","endLine":28,"endColumn":32,"fix":{"range":[796,797],"text":""}},{"ruleId":"eol-last","severity":2,"message":"Newline required at end of file but not found.","line":28,"column":32,"nodeType":"Program","messageId":"missing","fix":{"range":[797,797],"text":"\n"}}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":4,"fixableWarningCount":0,"source":"const logger = require('../utils/logger');\nconst config = require('../config');\n\n/**\n * Error handling middleware\n * @param {Error} err - Error object\n * @param {Object} req - Express request object\n * @param {Object} res - Express response object\n * @param {Function} next - Express next function\n */\nconst errorHandler = (err, req, res, next) => {\n  // Log the error\n  logger.error('Unhandled error:', {\n    error: err.message,\n    stack: err.stack,\n    path: req.path,\n    method: req.method\n  });\n\n  // Send error response\n  res.status(err.status || 500).json({\n    error: 'Internal Server Error',\n    message: config.nodeEnv === 'development' ? err.message : 'Something went wrong',\n    stack: config.nodeEnv === 'development' ? err.stack : undefined\n  });\n};\n\nmodule.exports = errorHandler; ","usedDeprecatedRules":[{"ruleId":"max-len","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/server/src/middleware/requestLogger.js","messages":[{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":11,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":11,"endColumn":3,"fix":{"range":[301,303],"text":""}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":17,"column":37,"nodeType":"Property","messageId":"missing","endLine":18,"endColumn":1,"fix":{"range":[458,463],"text":"),\n  }"}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":19,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":19,"endColumn":3,"fix":{"range":[466,468],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":23,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":23,"endColumn":5,"fix":{"range":[569,573],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":25,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":25,"endColumn":5,"fix":{"range":[637,641],"text":""}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":30,"column":15,"nodeType":"Property","messageId":"missing","endLine":31,"endColumn":1,"fix":{"range":[814,828],"text":"duration,\n    }"}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":33,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":33,"endColumn":3,"fix":{"range":[837,839],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":37,"column":32,"nodeType":"Program","messageId":"trailingSpace","endLine":37,"endColumn":33,"fix":{"range":[885,886],"text":""}},{"ruleId":"eol-last","severity":2,"message":"Newline required at end of file but not found.","line":37,"column":33,"nodeType":"Program","messageId":"missing","fix":{"range":[886,886],"text":"\n"}}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":9,"fixableWarningCount":0,"source":"const logger = require('../utils/logger');\n\n/**\n * Request logging middleware\n * @param {Object} req - Express request object\n * @param {Object} res - Express response object\n * @param {Function} next - Express next function\n */\nconst requestLogger = (req, res, next) => {\n  const start = Date.now();\n  \n  // Log request\n  logger.info(`${req.method} ${req.url}`, {\n    method: req.method,\n    url: req.url,\n    ip: req.ip,\n    userAgent: req.get('User-Agent')\n  });\n  \n  // Log response when finished\n  res.on('finish', () => {\n    const duration = Date.now() - start;\n    \n    const logMethod = res.statusCode >= 400 ? 'warn' : 'info';\n    \n    logger[logMethod](`${req.method} ${req.url} ${res.statusCode} - ${duration}ms`, {\n      method: req.method,\n      url: req.url,\n      statusCode: res.statusCode,\n      duration\n    });\n  });\n  \n  next();\n};\n\nmodule.exports = requestLogger; ","usedDeprecatedRules":[{"ruleId":"max-len","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/server/src/routes/diffRoutes.js","messages":[{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":20,"column":25,"nodeType":"Program","messageId":"trailingSpace","endLine":20,"endColumn":26,"fix":{"range":[470,471],"text":""}},{"ruleId":"eol-last","severity":2,"message":"Newline required at end of file but not found.","line":20,"column":26,"nodeType":"Program","messageId":"missing","fix":{"range":[471,471],"text":"\n"}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"const express = require('express');\nconst diffController = require('../controllers/diffController');\n\nconst router = express.Router();\n\n/**\n * @route   POST /api/diff\n * @desc    Get diff between two branches\n * @access  Public\n */\nrouter.post('/diff', diffController.getDiff);\n\n/**\n * @route   POST /api/diff/analyze\n * @desc    Analyze diff between two branches\n * @access  Public\n */\nrouter.post('/diff/analyze', diffController.analyzeDiff);\n\nmodule.exports = router; ","usedDeprecatedRules":[{"ruleId":"max-len","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/server/src/routes/index.js","messages":[{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":16,"column":25,"nodeType":"Program","messageId":"trailingSpace","endLine":16,"endColumn":26,"fix":{"range":[429,430],"text":""}},{"ruleId":"eol-last","severity":2,"message":"Newline required at end of file but not found.","line":16,"column":26,"nodeType":"Program","messageId":"missing","fix":{"range":[430,430],"text":"\n"}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"const express = require('express');\nconst repositoryRoutes = require('./repositoryRoutes');\nconst diffRoutes = require('./diffRoutes');\n\nconst router = express.Router();\n\n// Register routes\nrouter.use('/api', repositoryRoutes);\nrouter.use('/api', diffRoutes);\n\n// Health check route\nrouter.get('/health', (req, res) => {\n  res.status(200).json({ status: 'ok', timestamp: new Date().toISOString() });\n});\n\nmodule.exports = router; ","usedDeprecatedRules":[{"ruleId":"max-len","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/server/src/routes/repositoryRoutes.js","messages":[{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":34,"column":25,"nodeType":"Program","messageId":"trailingSpace","endLine":34,"endColumn":26,"fix":{"range":[870,871],"text":""}},{"ruleId":"eol-last","severity":2,"message":"Newline required at end of file but not found.","line":34,"column":26,"nodeType":"Program","messageId":"missing","fix":{"range":[871,871],"text":"\n"}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"const express = require('express');\nconst repositoryController = require('../controllers/repositoryController');\n\nconst router = express.Router();\n\n/**\n * @route   GET /api/repositories\n * @desc    Get list of repositories\n * @access  Public\n */\nrouter.get('/repositories', repositoryController.getRepositories);\n\n/**\n * @route   POST /api/repository/set\n * @desc    Set current repository\n * @access  Public\n */\nrouter.post('/repository/set', repositoryController.setRepository);\n\n/**\n * @route   GET /api/repository/branches\n * @desc    Get branches for current repository\n * @access  Public\n */\nrouter.get('/repository/branches', repositoryController.getBranches);\n\n/**\n * @route   GET /api/repository/info\n * @desc    Get current repository info\n * @access  Public\n */\nrouter.get('/repository/info', repositoryController.getRepositoryInfo);\n\nmodule.exports = router; ","usedDeprecatedRules":[{"ruleId":"max-len","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/server/src/services/AnalyzerService.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'fs' is assigned a value but never used.","line":2,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":9},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":27,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":27,"endColumn":7,"fix":{"range":[621,627],"text":""}},{"ruleId":"arrow-body-style","severity":2,"message":"Unexpected block statement surrounding arrow body; parenthesize the returned value and move it immediately after the `=>`.","line":30,"column":35,"nodeType":"ArrowFunctionExpression","messageId":"unexpectedObjectBlock","endLine":35,"endColumn":10,"fix":{"range":[736,851],"text":"({\n            ...file,\n            analysis: await this.analyzeFile(file)\n          })"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":33,"column":51,"nodeType":"Property","messageId":"missing","endLine":34,"endColumn":1,"fix":{"range":[827,840],"text":"),\n          }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":35,"column":11,"nodeType":"CallExpression","messageId":"missing","endLine":36,"endColumn":1,"fix":{"range":[851,860],"text":"),\n      )"}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":37,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":37,"endColumn":7,"fix":{"range":[862,868],"text":""}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":40,"column":53,"nodeType":"Property","messageId":"missing","endLine":41,"endColumn":1,"fix":{"range":[965,974],"text":"),\n      }"}},{"ruleId":"class-methods-use-this","severity":2,"message":"Expected 'this' to be used by class method 'parseDiff'.","line":53,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":53,"endColumn":12},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":56,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":56,"endColumn":5,"fix":{"range":[1308,1312],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":59,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":59,"endColumn":5,"fix":{"range":[1395,1399],"text":""}},{"ruleId":"no-restricted-syntax","severity":2,"message":"iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.","line":60,"column":5,"nodeType":"ForOfStatement","messageId":"restrictedSyntax","endLine":123,"endColumn":6},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":67,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":67,"endColumn":9,"fix":{"range":[1655,1663],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":71,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":71,"endColumn":9,"fix":{"range":[1812,1820],"text":""}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":79,"column":23,"nodeType":"Property","messageId":"missing","endLine":80,"endColumn":1,"fix":{"range":[2070,2081],"text":"0,\n        }"}},{"ruleId":"brace-style","severity":2,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":81,"column":7,"nodeType":"Punctuator","messageId":"nextLineClose","endLine":81,"endColumn":8},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":81,"column":8,"nodeType":"Program","messageId":"trailingSpace","endLine":81,"endColumn":9,"fix":{"range":[2090,2091],"text":""}},{"ruleId":"security/detect-unsafe-regex","severity":2,"message":"Unsafe Regular Expression","line":85,"column":34,"nodeType":"Literal","endLine":85,"endColumn":72},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":86,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":86,"endColumn":9,"fix":{"range":[2278,2286],"text":""}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":92,"column":22,"nodeType":"Property","messageId":"missing","endLine":93,"endColumn":1,"fix":{"range":[2477,2498],"text":"startLine,\n          }"}},{"ruleId":"brace-style","severity":2,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":95,"column":7,"nodeType":"Punctuator","messageId":"nextLineClose","endLine":95,"endColumn":8},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":95,"column":8,"nodeType":"Program","messageId":"trailingSpace","endLine":95,"endColumn":9,"fix":{"range":[2518,2519],"text":""}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":101,"column":35,"nodeType":"Property","messageId":"missing","endLine":102,"endColumn":1,"fix":{"range":[2751,2764],"text":"),\n          }"}},{"ruleId":"no-plusplus","severity":2,"message":"Unary operator '++' used.","line":103,"column":11,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":103,"endColumn":34},{"ruleId":"brace-style","severity":2,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":105,"column":7,"nodeType":"Punctuator","messageId":"nextLineClose","endLine":105,"endColumn":8},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":105,"column":8,"nodeType":"Program","messageId":"trailingSpace","endLine":105,"endColumn":9,"fix":{"range":[2819,2820],"text":""}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":111,"column":35,"nodeType":"Property","messageId":"missing","endLine":112,"endColumn":1,"fix":{"range":[3051,3064],"text":"),\n          }"}},{"ruleId":"no-plusplus","severity":2,"message":"Unary operator '++' used.","line":113,"column":11,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":113,"endColumn":34},{"ruleId":"brace-style","severity":2,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":115,"column":7,"nodeType":"Punctuator","messageId":"nextLineClose","endLine":115,"endColumn":8},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":115,"column":8,"nodeType":"Program","messageId":"trailingSpace","endLine":115,"endColumn":9,"fix":{"range":[3119,3120],"text":""}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":120,"column":24,"nodeType":"Property","messageId":"missing","endLine":121,"endColumn":1,"fix":{"range":[3326,3340],"text":"line,\n        }"}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":124,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":124,"endColumn":5,"fix":{"range":[3357,3361],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":129,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":129,"endColumn":5,"fix":{"range":[3447,3451],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":142,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":142,"endColumn":7,"fix":{"range":[3751,3757],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":145,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":145,"endColumn":7,"fix":{"range":[3853,3859],"text":""}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":149,"column":65,"nodeType":"Property","messageId":"missing","endLine":150,"endColumn":1,"fix":{"range":[3976,3985],"text":"),\n      }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":156,"column":31,"nodeType":"Property","messageId":"missing","endLine":157,"endColumn":1,"fix":{"range":[4173,4190],"text":"'unknown',\n      }"}},{"ruleId":"class-methods-use-this","severity":2,"message":"Expected 'this' to be used by class method 'getFileType'.","line":166,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":166,"endColumn":14},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":189,"column":17,"nodeType":"Property","messageId":"missing","endLine":190,"endColumn":1,"fix":{"range":[4810,4821],"text":"'SQL',\n    }"}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":191,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":191,"endColumn":5,"fix":{"range":[4823,4827],"text":""}},{"ruleId":"class-methods-use-this","severity":2,"message":"Expected 'this' to be used by class method 'calculateComplexity'.","line":200,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":200,"endColumn":22},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":203,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":203,"endColumn":5,"fix":{"range":[5184,5188],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":212,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":212,"endColumn":5,"fix":{"range":[5397,5401],"text":""}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":217,"column":32,"nodeType":"Property","messageId":"missing","endLine":218,"endColumn":1,"fix":{"range":[5512,5527],"text":"deletions,\n    }"}},{"ruleId":"class-methods-use-this","severity":2,"message":"Expected 'this' to be used by class method 'calculateImpactLevel'.","line":227,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":227,"endColumn":23},{"ruleId":"no-else-return","severity":2,"message":"Unnecessary 'else' after 'return'.","line":231,"column":12,"nodeType":"IfStatement","messageId":"unexpected","endLine":235,"endColumn":6,"fix":{"range":[5738,5984],"text":"(file, complexity) {\n    // Determine impact level based on complexity and file type\n    if (complexity.score === 3) {\n      return 'high';\n    } if (complexity.score === 2) {\n      return 'medium';\n    } else {\n      return 'low';\n    }\n  }"}},{"ruleId":"class-methods-use-this","severity":2,"message":"Expected 'this' to be used by class method 'generateSummary'.","line":243,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":243,"endColumn":18},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":247,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":247,"endColumn":5,"fix":{"range":[6368,6372],"text":""}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":253,"column":17,"nodeType":"Property","messageId":"missing","endLine":254,"endColumn":1,"fix":{"range":[6496,6503],"text":"0,\n    }"}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":255,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":255,"endColumn":5,"fix":{"range":[6505,6509],"text":""}},{"ruleId":"arrow-parens","severity":2,"message":"Expected parentheses around arrow function argument.","line":256,"column":19,"nodeType":"ArrowFunctionExpression","messageId":"expectedParens","endLine":256,"endColumn":23,"fix":{"range":[6528,6532],"text":"(file)"}},{"ruleId":"no-plusplus","severity":2,"message":"Unary operator '++' used.","line":258,"column":9,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":258,"endColumn":50},{"ruleId":"no-plusplus","severity":2,"message":"Unary operator '++' used.","line":260,"column":9,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":260,"endColumn":31},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":263,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":263,"endColumn":5,"fix":{"range":[6708,6712],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":273,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":273,"endColumn":5,"fix":{"range":[6953,6957],"text":""}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":279,"column":20,"nodeType":"Property","messageId":"missing","endLine":280,"endColumn":1,"fix":{"range":[7059,7078],"text":"overallImpact,\n    }"}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":284,"column":34,"nodeType":"Program","messageId":"trailingSpace","endLine":284,"endColumn":35,"fix":{"range":[7120,7121],"text":""}},{"ruleId":"eol-last","severity":2,"message":"Newline required at end of file but not found.","line":284,"column":35,"nodeType":"Program","messageId":"missing","fix":{"range":[7121,7121],"text":"\n"}}],"suppressedMessages":[],"errorCount":57,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":41,"fixableWarningCount":0,"source":"const path = require('path');\nconst fs = require('fs').promises;\nconst logger = require('../utils/logger');\n\nclass AnalyzerService {\n  constructor(repoPath = '') {\n    this.repoPath = repoPath;\n  }\n\n  /**\n   * Set the repository path\n   * @param {string} repoPath - Path to the repository\n   */\n  setRepoPath(repoPath) {\n    this.repoPath = repoPath;\n  }\n\n  /**\n   * Analyze a diff output\n   * @param {string} diffOutput - Git diff output\n   * @returns {Promise<Object>} - Analyzed diff data\n   */\n  async analyzeDiff(diffOutput) {\n    try {\n      // Parse the diff output\n      const files = this.parseDiff(diffOutput);\n      \n      // Analyze each file\n      const analyzedFiles = await Promise.all(\n        files.map(async (file) => {\n          return {\n            ...file,\n            analysis: await this.analyzeFile(file)\n          };\n        })\n      );\n      \n      return {\n        files: analyzedFiles,\n        summary: this.generateSummary(analyzedFiles)\n      };\n    } catch (error) {\n      logger.error('Error analyzing diff:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Parse diff output into structured data\n   * @param {string} diffOutput - Git diff output\n   * @returns {Array} - Array of file objects\n   */\n  parseDiff(diffOutput) {\n    const files = [];\n    let currentFile = null;\n    \n    // Split the diff output into lines\n    const lines = diffOutput.split('\\n');\n    \n    for (const line of lines) {\n      // Check if line indicates a new file\n      if (line.startsWith('diff --git')) {\n        // If we have a current file, add it to the files array\n        if (currentFile) {\n          files.push(currentFile);\n        }\n        \n        // Extract file path\n        const match = line.match(/diff --git a\\/(.*) b\\/(.*)/);\n        const filePath = match ? match[1] : 'unknown';\n        \n        // Create a new file object\n        currentFile = {\n          path: filePath,\n          name: path.basename(filePath),\n          extension: path.extname(filePath).slice(1),\n          changes: [],\n          additions: 0,\n          deletions: 0\n        };\n      } \n      // Check if line is a hunk header\n      else if (line.startsWith('@@')) {\n        // Extract line numbers\n        const match = line.match(/@@ -(\\d+),?(\\d+)? \\+(\\d+),?(\\d+)? @@/);\n        \n        if (match && currentFile) {\n          const startLine = parseInt(match[3], 10);\n          currentFile.changes.push({\n            type: 'hunk',\n            content: line,\n            startLine\n          });\n        }\n      } \n      // Check if line is an addition\n      else if (line.startsWith('+') && !line.startsWith('+++')) {\n        if (currentFile) {\n          currentFile.changes.push({\n            type: 'addition',\n            content: line.slice(1)\n          });\n          currentFile.additions++;\n        }\n      } \n      // Check if line is a deletion\n      else if (line.startsWith('-') && !line.startsWith('---')) {\n        if (currentFile) {\n          currentFile.changes.push({\n            type: 'deletion',\n            content: line.slice(1)\n          });\n          currentFile.deletions++;\n        }\n      } \n      // Otherwise, it's a context line\n      else if (currentFile && !line.startsWith('---') && !line.startsWith('+++')) {\n        currentFile.changes.push({\n          type: 'context',\n          content: line\n        });\n      }\n    }\n    \n    // Add the last file\n    if (currentFile) {\n      files.push(currentFile);\n    }\n    \n    return files;\n  }\n\n  /**\n   * Analyze a file's changes\n   * @param {Object} file - File object\n   * @returns {Promise<Object>} - Analysis results\n   */\n  async analyzeFile(file) {\n    try {\n      // Determine file type based on extension\n      const fileType = this.getFileType(file.extension);\n      \n      // Calculate complexity metrics\n      const complexity = this.calculateComplexity(file);\n      \n      return {\n        fileType,\n        complexity,\n        impactLevel: this.calculateImpactLevel(file, complexity)\n      };\n    } catch (error) {\n      logger.error(`Error analyzing file ${file.path}:`, error);\n      return {\n        fileType: 'unknown',\n        complexity: { score: 0 },\n        impactLevel: 'unknown'\n      };\n    }\n  }\n\n  /**\n   * Get file type based on extension\n   * @param {string} extension - File extension\n   * @returns {string} - File type\n   */\n  getFileType(extension) {\n    const typeMap = {\n      js: 'JavaScript',\n      jsx: 'React',\n      ts: 'TypeScript',\n      tsx: 'React TypeScript',\n      py: 'Python',\n      java: 'Java',\n      rb: 'Ruby',\n      php: 'PHP',\n      go: 'Go',\n      rs: 'Rust',\n      c: 'C',\n      cpp: 'C++',\n      cs: 'C#',\n      html: 'HTML',\n      css: 'CSS',\n      scss: 'SCSS',\n      json: 'JSON',\n      md: 'Markdown',\n      yml: 'YAML',\n      yaml: 'YAML',\n      xml: 'XML',\n      sql: 'SQL'\n    };\n    \n    return typeMap[extension.toLowerCase()] || 'Unknown';\n  }\n\n  /**\n   * Calculate complexity metrics for a file\n   * @param {Object} file - File object\n   * @returns {Object} - Complexity metrics\n   */\n  calculateComplexity(file) {\n    // Simple complexity calculation based on number of changes\n    const totalChanges = file.additions + file.deletions;\n    \n    let score;\n    if (totalChanges < 10) {\n      score = 1; // Low complexity\n    } else if (totalChanges < 50) {\n      score = 2; // Medium complexity\n    } else {\n      score = 3; // High complexity\n    }\n    \n    return {\n      score,\n      changes: totalChanges,\n      additions: file.additions,\n      deletions: file.deletions\n    };\n  }\n\n  /**\n   * Calculate impact level of changes\n   * @param {Object} file - File object\n   * @param {Object} complexity - Complexity metrics\n   * @returns {string} - Impact level\n   */\n  calculateImpactLevel(file, complexity) {\n    // Determine impact level based on complexity and file type\n    if (complexity.score === 3) {\n      return 'high';\n    } else if (complexity.score === 2) {\n      return 'medium';\n    } else {\n      return 'low';\n    }\n  }\n\n  /**\n   * Generate a summary of the analyzed diff\n   * @param {Array} files - Array of analyzed file objects\n   * @returns {Object} - Summary object\n   */\n  generateSummary(files) {\n    const totalFiles = files.length;\n    const totalAdditions = files.reduce((sum, file) => sum + file.additions, 0);\n    const totalDeletions = files.reduce((sum, file) => sum + file.deletions, 0);\n    \n    // Count files by impact level\n    const impactCounts = {\n      high: 0,\n      medium: 0,\n      low: 0,\n      unknown: 0\n    };\n    \n    files.forEach(file => {\n      if (file.analysis && file.analysis.impactLevel) {\n        impactCounts[file.analysis.impactLevel]++;\n      } else {\n        impactCounts.unknown++;\n      }\n    });\n    \n    // Determine overall impact\n    let overallImpact;\n    if (impactCounts.high > 0) {\n      overallImpact = 'high';\n    } else if (impactCounts.medium > 0) {\n      overallImpact = 'medium';\n    } else {\n      overallImpact = 'low';\n    }\n    \n    return {\n      totalFiles,\n      totalAdditions,\n      totalDeletions,\n      impactCounts,\n      overallImpact\n    };\n  }\n}\n\nmodule.exports = AnalyzerService; ","usedDeprecatedRules":[{"ruleId":"max-len","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/server/src/services/GitService.js","messages":[{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":86,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":86,"endColumn":7,"fix":{"range":[2155,2161],"text":""}},{"ruleId":"security/detect-non-literal-fs-filename","severity":1,"message":"Found existsSync from package \"fs\" with non literal argument at index 0","line":87,"column":11,"nodeType":"CallExpression","endLine":87,"endColumn":48},{"ruleId":"security/detect-non-literal-fs-filename","severity":1,"message":"Found readFile from package \"fs\" with non literal argument at index 0","line":88,"column":28,"nodeType":"CallExpression","endLine":88,"endColumn":67},{"ruleId":"no-else-return","severity":2,"message":"Unnecessary 'else' after 'return'.","line":94,"column":14,"nodeType":"BlockStatement","messageId":"unexpected","endLine":97,"endColumn":8,"fix":{"range":[2078,2695],"text":"() {\n    try {\n      logger.info('Loading state from:', this.stateFilePath);\n      \n      if (fsSync.existsSync(this.stateFilePath)) {\n        const data = await fs.readFile(this.stateFilePath, 'utf8');\n        const state = JSON.parse(data);\n        this.repoPath = state.repoPath || '';\n        this.git = simpleGit(this.repoPath);\n        logger.info('Loaded repository path:', this.repoPath);\n        return this.repoPath;\n      } \n        logger.info('No state file exists yet');\n        return '';\n      \n    } catch (error) {\n      logger.error('Error loading state:', error);\n      return '';\n    }\n  }"}},{"ruleId":"security/detect-non-literal-fs-filename","severity":1,"message":"Found writeFile from package \"fs\" with non literal argument at index 0","line":111,"column":13,"nodeType":"CallExpression","endLine":111,"endColumn":90},{"ruleId":"class-methods-use-this","severity":2,"message":"Expected 'this' to be used by class async method 'findRepositories'.","line":123,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":123,"endColumn":25},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":131,"column":37,"nodeType":"CallExpression","messageId":"missing","endLine":132,"endColumn":1,"fix":{"range":[3531,3540],"text":"),\n      ]"}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":133,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":133,"endColumn":7,"fix":{"range":[3542,3548],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":135,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":135,"endColumn":7,"fix":{"range":[3580,3586],"text":""}},{"ruleId":"no-restricted-syntax","severity":2,"message":"iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.","line":136,"column":7,"nodeType":"ForOfStatement","messageId":"restrictedSyntax","endLine":171,"endColumn":8},{"ruleId":"no-await-in-loop","severity":2,"message":"Unexpected `await` inside a loop.","line":139,"column":11,"nodeType":"AwaitExpression","messageId":"unexpectedAwait","endLine":139,"endColumn":29},{"ruleId":"security/detect-non-literal-fs-filename","severity":1,"message":"Found stat from package \"fs\" with non literal argument at index 0","line":139,"column":17,"nodeType":"CallExpression","endLine":139,"endColumn":29},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":140,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":140,"endColumn":11,"fix":{"range":[3708,3718],"text":""}},{"ruleId":"no-await-in-loop","severity":2,"message":"Unexpected `await` inside a loop.","line":142,"column":25,"nodeType":"AwaitExpression","messageId":"unexpectedAwait","endLine":142,"endColumn":71},{"ruleId":"security/detect-non-literal-fs-filename","severity":1,"message":"Found readdir from package \"fs\" with non literal argument at index 0","line":142,"column":31,"nodeType":"CallExpression","endLine":142,"endColumn":71},{"ruleId":"arrow-parens","severity":2,"message":"Expected parentheses around arrow function argument.","line":144,"column":21,"nodeType":"ArrowFunctionExpression","messageId":"expectedParens","endLine":144,"endColumn":25,"fix":{"range":[3875,3879],"text":"(item)"}},{"ruleId":"arrow-parens","severity":2,"message":"Expected parentheses around arrow function argument.","line":145,"column":18,"nodeType":"ArrowFunctionExpression","messageId":"expectedParens","endLine":145,"endColumn":22,"fix":{"range":[3920,3924],"text":"(item)"}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":146,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":146,"endColumn":11,"fix":{"range":[3956,3966],"text":""}},{"ruleId":"no-restricted-syntax","severity":2,"message":"iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.","line":148,"column":11,"nodeType":"ForOfStatement","messageId":"restrictedSyntax","endLine":166,"endColumn":12},{"ruleId":"no-await-in-loop","severity":2,"message":"Unexpected `await` inside a loop.","line":151,"column":15,"nodeType":"AwaitExpression","messageId":"unexpectedAwait","endLine":151,"endColumn":36},{"ruleId":"security/detect-non-literal-fs-filename","severity":1,"message":"Found stat from package \"fs\" with non literal argument at index 0","line":151,"column":21,"nodeType":"CallExpression","endLine":151,"endColumn":36},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":152,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":152,"endColumn":15,"fix":{"range":[4173,4187],"text":""}},{"ruleId":"no-await-in-loop","severity":2,"message":"Unexpected `await` inside a loop.","line":155,"column":30,"nodeType":"AwaitExpression","messageId":"unexpectedAwait","endLine":155,"endColumn":53},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":156,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":156,"endColumn":15,"fix":{"range":[4326,4340],"text":""}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":160,"column":46,"nodeType":"Property","messageId":"missing","endLine":161,"endColumn":1,"fix":{"range":[4481,4500],"text":"),\n                }"}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":172,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":172,"endColumn":7,"fix":{"range":[4769,4775],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":181,"column":29,"nodeType":"Program","messageId":"trailingSpace","endLine":181,"endColumn":30,"fix":{"range":[4941,4942],"text":""}},{"ruleId":"eol-last","severity":2,"message":"Newline required at end of file but not found.","line":181,"column":30,"nodeType":"Program","messageId":"missing","fix":{"range":[4942,4942],"text":"\n"}}],"suppressedMessages":[],"errorCount":22,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":15,"fixableWarningCount":0,"source":"const simpleGit = require('simple-git');\nconst path = require('path');\nconst fs = require('fs').promises;\nconst fsSync = require('fs');\nconst os = require('os');\nconst logger = require('../utils/logger');\nconst config = require('../config');\n\nclass GitService {\n  constructor(repoPath = '') {\n    this.repoPath = repoPath;\n    this.git = simpleGit(repoPath);\n    this.stateFilePath = path.join(__dirname, '..', '..', config.git.statePath);\n  }\n\n  /**\n   * Set the repository path\n   * @param {string} repoPath - Path to the repository\n   */\n  setRepoPath(repoPath) {\n    this.repoPath = repoPath;\n    this.git = simpleGit(repoPath);\n  }\n\n  /**\n   * Check if the current path is a valid Git repository\n   * @returns {Promise<boolean>} - True if valid Git repository\n   */\n  async isValidRepo() {\n    try {\n      return await this.git.checkIsRepo();\n    } catch (error) {\n      logger.error('Error checking if valid repo:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Get all branches in the repository\n   * @returns {Promise<Object>} - Object containing branch information\n   */\n  async getBranches() {\n    try {\n      return await this.git.branchLocal();\n    } catch (error) {\n      logger.error('Error getting branches:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get the current branch\n   * @returns {Promise<string>} - Current branch name\n   */\n  async getCurrentBranch() {\n    try {\n      return (await this.git.branch()).current;\n    } catch (error) {\n      logger.error('Error getting current branch:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get diff between two branches\n   * @param {string} fromBranch - Source branch\n   * @param {string} toBranch - Target branch\n   * @returns {Promise<string>} - Diff output\n   */\n  async getDiff(fromBranch, toBranch) {\n    try {\n      return await this.git.diff([fromBranch, toBranch]);\n    } catch (error) {\n      logger.error('Error getting diff:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Load repository path from state file\n   * @returns {Promise<string>} - Repository path\n   */\n  async loadState() {\n    try {\n      logger.info('Loading state from:', this.stateFilePath);\n      \n      if (fsSync.existsSync(this.stateFilePath)) {\n        const data = await fs.readFile(this.stateFilePath, 'utf8');\n        const state = JSON.parse(data);\n        this.repoPath = state.repoPath || '';\n        this.git = simpleGit(this.repoPath);\n        logger.info('Loaded repository path:', this.repoPath);\n        return this.repoPath;\n      } else {\n        logger.info('No state file exists yet');\n        return '';\n      }\n    } catch (error) {\n      logger.error('Error loading state:', error);\n      return '';\n    }\n  }\n\n  /**\n   * Save repository path to state file\n   * @returns {Promise<void>}\n   */\n  async saveState() {\n    try {\n      logger.info('Saving state, repoPath:', this.repoPath);\n      await fs.writeFile(this.stateFilePath, JSON.stringify({ repoPath: this.repoPath }));\n      logger.info('State saved successfully');\n    } catch (error) {\n      logger.error('Error saving state:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Find Git repositories in common directories\n   * @returns {Promise<Array>} - Array of repository objects\n   */\n  async findRepositories() {\n    try {\n      const homeDir = os.homedir();\n      const commonDirs = [\n        path.join(homeDir, 'Documents'),\n        path.join(homeDir, 'Projects'),\n        path.join(homeDir, 'Development'),\n        path.join(homeDir, 'Code'),\n        path.join(homeDir, 'Github')\n      ];\n      \n      const repositories = [];\n      \n      for (const dir of commonDirs) {\n        try {\n          // Check if directory exists\n          await fs.stat(dir);\n          \n          // Get subdirectories\n          const items = await fs.readdir(dir, { withFileTypes: true });\n          const subdirs = items\n            .filter(item => item.isDirectory())\n            .map(item => path.join(dir, item.name));\n          \n          // Check each subdirectory for .git folder\n          for (const subdir of subdirs) {\n            try {\n              const gitDir = path.join(subdir, '.git');\n              await fs.stat(gitDir);\n              \n              // It's a git repository\n              const git = simpleGit(subdir);\n              const isRepo = await git.checkIsRepo();\n              \n              if (isRepo) {\n                repositories.push({\n                  path: subdir,\n                  name: path.basename(subdir)\n                });\n              }\n            } catch (err) {\n              // Not a git repository, continue\n            }\n          }\n        } catch (err) {\n          // Directory doesn't exist, continue\n          logger.debug(`Directory doesn't exist: ${dir}`);\n        }\n      }\n      \n      return repositories;\n    } catch (error) {\n      logger.error('Error finding repositories:', error);\n      return [];\n    }\n  }\n}\n\nmodule.exports = GitService; ","usedDeprecatedRules":[{"ruleId":"max-len","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/server/src/utils/logger.js","messages":[{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":10,"column":24,"nodeType":"CallExpression","messageId":"missing","endLine":11,"endColumn":1,"fix":{"range":[322,325],"text":"),\n)"}},{"ruleId":"object-curly-newline","severity":2,"message":"Expected a line break after this opening brace.","line":16,"column":26,"nodeType":"ObjectPattern","messageId":"expectedLinebreakAfterOpeningBrace","endLine":16,"endColumn":27,"fix":{"range":[528,528],"text":"\n"}},{"ruleId":"object-curly-newline","severity":2,"message":"Expected a line break before this closing brace.","line":16,"column":63,"nodeType":"ObjectPattern","messageId":"expectedLinebreakBeforeClosingBrace","endLine":16,"endColumn":64,"fix":{"range":[564,564],"text":"\n"}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":41,"column":46,"nodeType":"Program","messageId":"trailingSpace","endLine":41,"endColumn":47,"fix":{"range":[1327,1328],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":42,"column":50,"nodeType":"Program","messageId":"trailingSpace","endLine":42,"endColumn":51,"fix":{"range":[1378,1379],"text":""}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":46,"column":5,"nodeType":"CallExpression","messageId":"missing","endLine":47,"endColumn":1,"fix":{"range":[1474,1477],"text":"),\n)"}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":56,"column":34,"nodeType":"Program","messageId":"trailingSpace","endLine":56,"endColumn":35,"fix":{"range":[1758,1759],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":57,"column":34,"nodeType":"Program","messageId":"trailingSpace","endLine":57,"endColumn":35,"fix":{"range":[1793,1794],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":59,"column":22,"nodeType":"Program","messageId":"trailingSpace","endLine":59,"endColumn":23,"fix":{"range":[1838,1839],"text":""}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":59,"column":22,"nodeType":"Property","messageId":"missing","endLine":59,"endColumn":23,"fix":{"range":[1832,1845],"text":"'logs', \n    }"}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":62,"column":34,"nodeType":"Program","messageId":"trailingSpace","endLine":62,"endColumn":35,"fix":{"range":[1919,1920],"text":""}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":64,"column":22,"nodeType":"Property","messageId":"missing","endLine":65,"endColumn":1,"fix":{"range":[1973,1985],"text":"'logs',\n    }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":65,"column":7,"nodeType":"NewExpression","messageId":"missing","endLine":66,"endColumn":1,"fix":{"range":[1985,1990],"text":"),\n  ]"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":66,"column":4,"nodeType":"Property","messageId":"missing","endLine":67,"endColumn":1,"fix":{"range":[1989,1992],"text":"],\n}"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":72,"column":26,"nodeType":"Property","messageId":"missing","endLine":73,"endColumn":1,"fix":{"range":[2170,2187],"text":"consoleFormat,\n  }"}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":99,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":99,"endColumn":3,"fix":{"range":[2844,2846],"text":""}},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":100,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":100,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"table"},"fix":{"range":[2849,2878],"text":""},"desc":"Remove the console.table()."}]},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":103,"column":25,"nodeType":"Program","messageId":"trailingSpace","endLine":103,"endColumn":26,"fix":{"range":[2907,2908],"text":""}},{"ruleId":"eol-last","severity":2,"message":"Newline required at end of file but not found.","line":103,"column":26,"nodeType":"Program","messageId":"missing","fix":{"range":[2908,2908],"text":"\n"}}],"suppressedMessages":[],"errorCount":19,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":18,"fixableWarningCount":0,"source":"const winston = require('winston');\nconst chalk = require('chalk');\nconst config = require('../config');\n\n// Define log format\nconst logFormat = winston.format.combine(\n  winston.format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),\n  winston.format.errors({ stack: true }),\n  winston.format.splat(),\n  winston.format.json()\n);\n\n// Custom formatter for console with enhanced colors using chalk\nconst consoleFormat = winston.format.combine(\n  winston.format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),\n  winston.format.printf(({ level, message, timestamp, ...meta }) => {\n    // Define color scheme for different log levels\n    const colorize = (text, lvl) => {\n      switch (lvl) {\n        case 'error':\n          return chalk.bold.red(text);\n        case 'warn':\n          return chalk.keyword('orange')(text);\n        case 'info':\n          return chalk.bold.blue(text);\n        case 'http':\n          return chalk.magenta(text);\n        case 'verbose':\n          return chalk.cyan(text);\n        case 'debug':\n          return chalk.green(text);\n        case 'silly':\n          return chalk.grey(text);\n        default:\n          return text;\n      }\n    };\n\n    const colorizedLevel = colorize(level.toUpperCase(), level);\n    const colorizedTimestamp = chalk.gray(timestamp);\n    const metadata = Object.keys(meta).length \n      ? chalk.gray(JSON.stringify(meta, null, 2)) \n      : '';\n\n    return `${colorizedTimestamp} ${colorizedLevel}: ${message} ${metadata}`;\n  })\n);\n\n// Create the logger\nconst logger = winston.createLogger({\n  level: config.logging.level || 'info',\n  format: logFormat,\n  defaultMeta: { service: 'local-coderabbit' },\n  transports: [\n    // Write logs with level 'error' and below to error.log\n    new winston.transports.File({ \n      filename: 'logs/error.log', \n      level: 'error',\n      dirname: 'logs' \n    }),\n    // Write all logs to combined.log\n    new winston.transports.File({ \n      filename: 'logs/combined.log',\n      dirname: 'logs'\n    })\n  ]\n});\n\n// If we're not in production, also log to the console with a simpler format\nif (config.nodeEnv !== 'production') {\n  logger.add(new winston.transports.Console({\n    format: consoleFormat\n  }));\n}\n\n// Add convenience methods for colorized logging\nlogger.success = (message, meta = {}) => {\n  logger.info(`${chalk.bold.green('✓')} ${message}`, meta);\n};\n\nlogger.important = (message, meta = {}) => {\n  logger.info(`${chalk.bold.yellow('!')} ${message}`, meta);\n};\n\nlogger.highlight = (message, meta = {}) => {\n  logger.info(`${chalk.bold.cyan('→')} ${message}`, meta);\n};\n\nlogger.section = (title) => {\n  const line = chalk.gray('─'.repeat(80));\n  logger.info(`\\n${line}\\n${chalk.bold.white(title)}\\n${line}`);\n};\n\nlogger.table = (data, columns) => {\n  if (!data || !data.length) {\n    logger.info(chalk.gray('No data to display'));\n    return;\n  }\n  \n  console.table(data, columns);\n};\n\nmodule.exports = logger; ","usedDeprecatedRules":[{"ruleId":"max-len","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/server/src/utils/performance-analyzer.js","messages":[{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":3,"column":3,"nodeType":"Program","messageId":"trailingSpace","endLine":3,"endColumn":4,"fix":{"range":[30,31],"text":""}},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":23,"column":22,"nodeType":"MemberExpression","messageId":"unexpected","endLine":23,"endColumn":33},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":24,"column":25,"nodeType":"MemberExpression","messageId":"unexpected","endLine":24,"endColumn":36},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":25,"column":23,"nodeType":"MemberExpression","messageId":"unexpected","endLine":25,"endColumn":34},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":26,"column":22,"nodeType":"MemberExpression","messageId":"unexpected","endLine":26,"endColumn":33},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":27,"column":24,"nodeType":"MemberExpression","messageId":"unexpected","endLine":27,"endColumn":35},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":28,"column":24,"nodeType":"MemberExpression","messageId":"unexpected","endLine":28,"endColumn":35},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":40,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":40,"endColumn":3,"fix":{"range":[1300,1302],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":44,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":44,"endColumn":3,"fix":{"range":[1410,1412],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":47,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":47,"endColumn":3,"fix":{"range":[1501,1503],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":66,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":66,"endColumn":3,"fix":{"range":[2028,2030],"text":""}},{"ruleId":"max-len","severity":2,"message":"This line has a length of 105. Maximum allowed is 100.","line":68,"column":1,"nodeType":"Program","messageId":"max","endLine":68,"endColumn":106},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":69,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":69,"endColumn":3,"fix":{"range":[2225,2227],"text":""}},{"ruleId":"max-len","severity":2,"message":"This line has a length of 109. Maximum allowed is 100.","line":70,"column":1,"nodeType":"Program","messageId":"max","endLine":70,"endColumn":110},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":71,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":71,"endColumn":3,"fix":{"range":[2338,2340],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":75,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":75,"endColumn":3,"fix":{"range":[2546,2548],"text":""}},{"ruleId":"no-shadow","severity":2,"message":"'_' is already declared in the upper scope on line 8 column 7.","line":87,"column":65,"nodeType":"Identifier","messageId":"noShadow","endLine":87,"endColumn":66},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":87,"column":76,"nodeType":"Program","messageId":"trailingSpace","endLine":87,"endColumn":77,"fix":{"range":[2814,2815],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":88,"column":11,"nodeType":"Program","messageId":"trailingSpace","endLine":88,"endColumn":12,"fix":{"range":[2826,2827],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":93,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":93,"endColumn":3,"fix":{"range":[2924,2926],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":96,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":96,"endColumn":3,"fix":{"range":[3000,3002],"text":""}},{"ruleId":"prefer-const","severity":2,"message":"'results' is never reassigned. Use 'const' instead.","line":99,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":99,"endColumn":16,"fix":{"range":[3096,3113],"text":"const results = [];"}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":100,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":100,"endColumn":5,"fix":{"range":[3114,3118],"text":""}},{"ruleId":"no-plusplus","severity":2,"message":"Unary operator '++' used.","line":101,"column":37,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":101,"endColumn":40},{"ruleId":"arrow-parens","severity":2,"message":"Expected parentheses around arrow function argument.","line":103,"column":41,"nodeType":"ArrowFunctionExpression","messageId":"expectedParens","endLine":103,"endColumn":45,"fix":{"range":[3244,3248],"text":"(item)"}},{"ruleId":"arrow-parens","severity":2,"message":"Expected parentheses around arrow function argument.","line":104,"column":35,"nodeType":"ArrowFunctionExpression","messageId":"expectedParens","endLine":104,"endColumn":39,"fix":{"range":[3300,3304],"text":"(item)"}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":104,"column":45,"nodeType":"Program","messageId":"trailingSpace","endLine":104,"endColumn":46,"fix":{"range":[3310,3311],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":105,"column":21,"nodeType":"Program","messageId":"trailingSpace","endLine":105,"endColumn":22,"fix":{"range":[3332,3333],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":109,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":109,"endColumn":7,"fix":{"range":[3455,3461],"text":""}},{"ruleId":"arrow-parens","severity":2,"message":"Expected parentheses around arrow function argument.","line":112,"column":22,"nodeType":"ArrowFunctionExpression","messageId":"expectedParens","endLine":112,"endColumn":26,"fix":{"range":[3534,3538],"text":"(item)"}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":119,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":119,"endColumn":7,"fix":{"range":[3718,3724],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":122,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":122,"endColumn":5,"fix":{"range":[3780,3784],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":125,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":125,"endColumn":3,"fix":{"range":[3817,3819],"text":""}},{"ruleId":"prefer-const","severity":2,"message":"'results' is never reassigned. Use 'const' instead.","line":128,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":128,"endColumn":16,"fix":{"range":[3927,3944],"text":"const results = [];"}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":129,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":129,"endColumn":5,"fix":{"range":[3945,3949],"text":""}},{"ruleId":"no-plusplus","severity":2,"message":"Unary operator '++' used.","line":130,"column":37,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":130,"endColumn":40},{"ruleId":"arrow-parens","severity":2,"message":"Expected parentheses around arrow function argument.","line":134,"column":14,"nodeType":"ArrowFunctionExpression","messageId":"expectedParens","endLine":134,"endColumn":18,"fix":{"range":[4109,4113],"text":"(item)"}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":134,"column":24,"nodeType":"Program","messageId":"trailingSpace","endLine":134,"endColumn":25,"fix":{"range":[4119,4120],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":135,"column":23,"nodeType":"Program","messageId":"trailingSpace","endLine":135,"endColumn":24,"fix":{"range":[4143,4144],"text":""}},{"ruleId":"arrow-parens","severity":2,"message":"Expected parentheses around arrow function argument.","line":139,"column":18,"nodeType":"ArrowFunctionExpression","messageId":"expectedParens","endLine":139,"endColumn":22,"fix":{"range":[4251,4255],"text":"(item)"}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":141,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":141,"endColumn":7,"fix":{"range":[4312,4318],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":144,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":144,"endColumn":5,"fix":{"range":[4376,4380],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":147,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":147,"endColumn":3,"fix":{"range":[4413,4415],"text":""}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":152,"column":7,"nodeType":"Literal","messageId":"missing","endLine":152,"endColumn":8,"fix":{"range":[4542,4592],"text":"50, // Fewer iterations for this intensive test\n  )"}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":165,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":165,"endColumn":3,"fix":{"range":[4932,4934],"text":""}},{"ruleId":"no-shadow","severity":2,"message":"'_' is already declared in the upper scope on line 8 column 7.","line":167,"column":46,"nodeType":"Identifier","messageId":"noShadow","endLine":167,"endColumn":47},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":168,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":168,"endColumn":3,"fix":{"range":[5034,5036],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":172,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":172,"endColumn":5,"fix":{"range":[5165,5169],"text":""}},{"ruleId":"no-restricted-syntax","severity":2,"message":"iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.","line":173,"column":5,"nodeType":"ForOfStatement","messageId":"restrictedSyntax","endLine":176,"endColumn":6},{"ruleId":"no-await-in-loop","severity":2,"message":"Unexpected `await` inside a loop.","line":174,"column":22,"nodeType":"AwaitExpression","messageId":"unexpectedAwait","endLine":174,"endColumn":56},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":177,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":177,"endColumn":5,"fix":{"range":[5293,5297],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":180,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":180,"endColumn":3,"fix":{"range":[5330,5332],"text":""}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":186,"column":51,"nodeType":"ArrowFunctionExpression","messageId":"missing","endLine":187,"endColumn":1,"fix":{"range":[5561,5568],"text":"),\n    )"}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":188,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":188,"endColumn":5,"fix":{"range":[5570,5574],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":191,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":191,"endColumn":3,"fix":{"range":[5607,5609],"text":""}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":196,"column":6,"nodeType":"Literal","messageId":"missing","endLine":196,"endColumn":7,"fix":{"range":[5739,5794],"text":"5, // Fewer iterations due to the nature of the test\n  )"}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":207,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":207,"endColumn":5,"fix":{"range":[6028,6032],"text":""}},{"ruleId":"no-plusplus","severity":2,"message":"Unary operator '++' used.","line":209,"column":34,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":209,"endColumn":37},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":212,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":212,"endColumn":5,"fix":{"range":[6165,6169],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":215,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":215,"endColumn":3,"fix":{"range":[6191,6193],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":217,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":217,"endColumn":3,"fix":{"range":[6243,6245],"text":""}},{"ruleId":"prefer-const","severity":2,"message":"'results' is never reassigned. Use 'const' instead.","line":220,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":220,"endColumn":16,"fix":{"range":[6340,6357],"text":"const results = [];"}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":221,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":221,"endColumn":5,"fix":{"range":[6358,6362],"text":""}},{"ruleId":"no-plusplus","severity":2,"message":"Unary operator '++' used.","line":222,"column":37,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":222,"endColumn":40},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":225,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":225,"endColumn":7,"fix":{"range":[6487,6493],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":234,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":234,"endColumn":7,"fix":{"range":[6670,6676],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":241,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":241,"endColumn":9,"fix":{"range":[6861,6869],"text":""}},{"ruleId":"arrow-parens","severity":2,"message":"Expected parentheses around arrow function argument.","line":242,"column":36,"nodeType":"ArrowFunctionExpression","messageId":"expectedParens","endLine":242,"endColumn":39,"fix":{"range":[6905,6908],"text":"(val)"}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":247,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":247,"endColumn":9,"fix":{"range":[7019,7027],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":250,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":250,"endColumn":7,"fix":{"range":[7060,7066],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":254,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":254,"endColumn":5,"fix":{"range":[7152,7156],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":257,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":257,"endColumn":3,"fix":{"range":[7189,7191],"text":""}},{"ruleId":"prefer-const","severity":2,"message":"'results' is never reassigned. Use 'const' instead.","line":260,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":260,"endColumn":16,"fix":{"range":[7300,7317],"text":"const results = [];"}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":261,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":261,"endColumn":5,"fix":{"range":[7318,7322],"text":""}},{"ruleId":"no-plusplus","severity":2,"message":"Unary operator '++' used.","line":262,"column":37,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":262,"endColumn":40},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":265,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":265,"endColumn":7,"fix":{"range":[7444,7450],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":273,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":273,"endColumn":7,"fix":{"range":[7621,7627],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":283,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":283,"endColumn":7,"fix":{"range":[7911,7917],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":286,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":286,"endColumn":5,"fix":{"range":[7959,7963],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":289,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":289,"endColumn":3,"fix":{"range":[7996,7998],"text":""}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":294,"column":8,"nodeType":"Literal","messageId":"missing","endLine":294,"endColumn":9,"fix":{"range":[8128,8179],"text":"100, // Fewer iterations for this intensive test\n  )"}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":302,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":302,"endColumn":3,"fix":{"range":[8383,8385],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":304,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":304,"endColumn":3,"fix":{"range":[8408,8410],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":309,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":309,"endColumn":5,"fix":{"range":[8568,8572],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":312,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":312,"endColumn":5,"fix":{"range":[8624,8628],"text":""}},{"ruleId":"arrow-parens","severity":2,"message":"Expected parentheses around arrow function argument.","line":313,"column":21,"nodeType":"ArrowFunctionExpression","messageId":"expectedParens","endLine":313,"endColumn":27,"fix":{"range":[8649,8655],"text":"(result)"}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":316,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":316,"endColumn":5,"fix":{"range":[8756,8760],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":326,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":326,"endColumn":5,"fix":{"range":[9004,9008],"text":""}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":329,"column":38,"nodeType":"CallExpression","messageId":"missing","endLine":330,"endColumn":1,"fix":{"range":[9123,9130],"text":"),\n    )"}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":331,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":331,"endColumn":5,"fix":{"range":[9132,9136],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":348,"column":3,"nodeType":"Program","messageId":"trailingSpace","endLine":348,"endColumn":4,"fix":{"range":[9480,9481],"text":""}},{"ruleId":"eol-last","severity":2,"message":"Newline required at end of file but not found.","line":348,"column":4,"nodeType":"Program","messageId":"missing","fix":{"range":[9481,9481],"text":"\n"}}],"suppressedMessages":[],"errorCount":92,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":75,"fixableWarningCount":0,"source":"/**\n * Performance Analyzer\n * \n * This utility demonstrates the performance benefits of using Lodash and Async\n * by comparing standard JavaScript operations with optimized versions.\n */\n\nconst _ = require('lodash');\nconst async = require('async');\nconst chalk = require('chalk');\nconst fs = require('fs');\nconst path = require('path');\nconst { performance } = require('perf_hooks');\n\n// Create reports directory if it doesn't exist\nconst reportsDir = path.join(__dirname, '..', '..', 'reports');\nif (!fs.existsSync(reportsDir)) {\n  fs.mkdirSync(reportsDir, { recursive: true });\n}\n\n// Logger setup\nconst log = {\n  info: (message) => console.log(chalk.blue(message)),\n  success: (message) => console.log(chalk.green(message)),\n  error: (message) => console.log(chalk.red(message)),\n  warn: (message) => console.log(chalk.yellow(message)),\n  result: (message) => console.log(chalk.cyan(message)),\n  header: (message) => console.log(chalk.bold.white(`\\n=== ${message} ===`)),\n};\n\n/**\n * Run a performance test\n * @param {string} name - Test name\n * @param {Function} fn - Function to test\n * @param {number} iterations - Number of iterations\n * @returns {Object} Test results\n */\nconst runTest = async (name, fn, iterations = 1000) => {\n  log.info(`Running test: ${name} (${iterations} iterations)`);\n  \n  const start = performance.now();\n  const result = await fn(iterations);\n  const end = performance.now();\n  \n  const duration = end - start;\n  log.success(`Completed in ${duration.toFixed(2)}ms`);\n  \n  return {\n    name,\n    duration,\n    iterations,\n    opsPerSecond: (iterations / (duration / 1000)).toFixed(2),\n    result,\n  };\n};\n\n/**\n * Compare standard vs optimized implementations\n * @param {string} testName - Test name\n * @param {Function} standardFn - Standard implementation\n * @param {Function} optimizedFn - Optimized implementation\n * @param {number} iterations - Number of iterations\n */\nconst compareImplementations = async (testName, standardFn, optimizedFn, iterations = 1000) => {\n  log.header(testName);\n  \n  const standardResult = await runTest(`Standard ${testName}`, standardFn, iterations);\n  const optimizedResult = await runTest(`Optimized ${testName} (Lodash/Async)`, optimizedFn, iterations);\n  \n  const improvement = ((standardResult.duration - optimizedResult.duration) / standardResult.duration) * 100;\n  \n  log.result(`\\nPerformance improvement: ${improvement.toFixed(2)}%`);\n  log.result(`Standard: ${standardResult.opsPerSecond} ops/sec`);\n  log.result(`Optimized: ${optimizedResult.opsPerSecond} ops/sec`);\n  \n  return {\n    testName,\n    standardResult,\n    optimizedResult,\n    improvement,\n  };\n};\n\n// Test 1: Array Manipulation\nconst arrayManipulationTest = async () => {\n  // Generate test data\n  const generateArray = (size) => Array.from({ length: size }, (_, i) => ({ \n    id: i, \n    value: Math.random() * 1000,\n    name: `Item ${i}`,\n    active: Math.random() > 0.5,\n  }));\n  \n  const arraySize = 10000;\n  const testArray = generateArray(arraySize);\n  \n  // Standard implementation\n  const standardArrayManipulation = async (iterations) => {\n    let results = [];\n    \n    for (let i = 0; i < iterations; i++) {\n      // Filter, map, and sort operations\n      const filtered = testArray.filter(item => item.active);\n      const mapped = filtered.map(item => ({ \n        id: item.id, \n        formattedValue: `$${item.value.toFixed(2)}`,\n      }));\n      const sorted = mapped.sort((a, b) => a.id - b.id);\n      \n      // Group by ranges\n      const grouped = {};\n      sorted.forEach(item => {\n        const range = Math.floor(item.id / 1000) * 1000;\n        if (!grouped[range]) {\n          grouped[range] = [];\n        }\n        grouped[range].push(item);\n      });\n      \n      results.push(Object.keys(grouped).length);\n    }\n    \n    return results.length;\n  };\n  \n  // Optimized implementation with Lodash\n  const optimizedArrayManipulation = async (iterations) => {\n    let results = [];\n    \n    for (let i = 0; i < iterations; i++) {\n      // Chained operations with Lodash\n      const processed = _(testArray)\n        .filter('active')\n        .map(item => ({ \n          id: item.id, \n          formattedValue: `$${item.value.toFixed(2)}`,\n        }))\n        .sortBy('id')\n        .groupBy(item => Math.floor(item.id / 1000) * 1000)\n        .value();\n      \n      results.push(Object.keys(processed).length);\n    }\n    \n    return results.length;\n  };\n  \n  return compareImplementations(\n    'Array Manipulation',\n    standardArrayManipulation,\n    optimizedArrayManipulation,\n    50 // Fewer iterations for this intensive test\n  );\n};\n\n// Test 2: Parallel Processing\nconst parallelProcessingTest = async () => {\n  // Simulate an async operation\n  const simulateAsyncOperation = (id) => new Promise((resolve) => {\n    const delay = Math.random() * 20; // Random delay up to 20ms\n    setTimeout(() => {\n      resolve({ id, processedAt: Date.now() });\n    }, delay);\n  });\n  \n  // Generate test data - IDs to process\n  const items = Array.from({ length: 100 }, (_, i) => i);\n  \n  // Standard implementation - sequential processing\n  const standardParallelProcessing = async () => {\n    const results = [];\n    \n    for (const item of items) {\n      const result = await simulateAsyncOperation(item);\n      results.push(result);\n    }\n    \n    return results.length;\n  };\n  \n  // Optimized implementation with Async\n  const optimizedParallelProcessing = async () => {\n    const results = await async.mapLimit(\n      items,\n      10, // Concurrency limit\n      async (item) => simulateAsyncOperation(item)\n    );\n    \n    return results.length;\n  };\n  \n  return compareImplementations(\n    'Parallel Processing',\n    standardParallelProcessing,\n    optimizedParallelProcessing,\n    5 // Fewer iterations due to the nature of the test\n  );\n};\n\n// Test 3: Object Manipulation\nconst objectManipulationTest = async () => {\n  // Generate test data\n  const generateNestedObject = (depth, breadth) => {\n    if (depth === 0) {\n      return { value: Math.random() * 1000 };\n    }\n    \n    const obj = {};\n    for (let i = 0; i < breadth; i++) {\n      obj[`prop${i}`] = generateNestedObject(depth - 1, breadth);\n    }\n    \n    return obj;\n  };\n  \n  const testObject = generateNestedObject(3, 5);\n  \n  // Standard implementation\n  const standardObjectManipulation = async (iterations) => {\n    let results = [];\n    \n    for (let i = 0; i < iterations; i++) {\n      // Deep clone\n      const cloned = JSON.parse(JSON.stringify(testObject));\n      \n      // Merge with another object\n      const merged = {\n        ...cloned,\n        additionalProp: {\n          name: 'test',\n          values: [1, 2, 3],\n        },\n      };\n      \n      // Extract values\n      const extractValues = (obj, result = []) => {\n        if (obj.value !== undefined) {\n          result.push(obj.value);\n          return result;\n        }\n        \n        Object.values(obj).forEach(val => {\n          if (typeof val === 'object') {\n            extractValues(val, result);\n          }\n        });\n        \n        return result;\n      };\n      \n      const values = extractValues(merged);\n      results.push(values.length);\n    }\n    \n    return results.length;\n  };\n  \n  // Optimized implementation with Lodash\n  const optimizedObjectManipulation = async (iterations) => {\n    let results = [];\n    \n    for (let i = 0; i < iterations; i++) {\n      // Deep clone with Lodash\n      const cloned = _.cloneDeep(testObject);\n      \n      // Merge with Lodash\n      const merged = _.merge({}, cloned, {\n        additionalProp: {\n          name: 'test',\n          values: [1, 2, 3],\n        },\n      });\n      \n      // Extract values with Lodash\n      const values = [];\n      _.forEach(merged, function iterateValues(val) {\n        if (_.has(val, 'value')) {\n          values.push(val.value);\n        } else if (_.isObject(val)) {\n          _.forEach(val, iterateValues);\n        }\n      });\n      \n      results.push(values.length);\n    }\n    \n    return results.length;\n  };\n  \n  return compareImplementations(\n    'Object Manipulation',\n    standardObjectManipulation,\n    optimizedObjectManipulation,\n    100 // Fewer iterations for this intensive test\n  );\n};\n\n// Run all tests and generate report\nconst runAllTests = async () => {\n  log.header('PERFORMANCE ANALYSIS');\n  log.info('Comparing standard JavaScript vs Lodash/Async optimized implementations\\n');\n  \n  const results = [];\n  \n  try {\n    results.push(await arrayManipulationTest());\n    results.push(await parallelProcessingTest());\n    results.push(await objectManipulationTest());\n    \n    // Generate summary\n    log.header('SUMMARY');\n    \n    results.forEach(result => {\n      log.result(`${result.testName}: ${result.improvement.toFixed(2)}% improvement`);\n    });\n    \n    // Save report to file\n    const report = {\n      timestamp: new Date().toISOString(),\n      results,\n      summary: {\n        averageImprovement: _.meanBy(results, 'improvement').toFixed(2),\n        tests: results.length,\n      },\n    };\n    \n    fs.writeFileSync(\n      path.join(reportsDir, 'performance-report.json'),\n      JSON.stringify(report, null, 2)\n    );\n    \n    log.success('\\nPerformance report saved to reports/performance-report.json');\n  } catch (error) {\n    log.error(`Error running tests: ${error.message}`);\n    console.error(error);\n  }\n};\n\n// Execute if run directly\nif (require.main === module) {\n  runAllTests();\n}\n\nmodule.exports = {\n  runTest,\n  compareImplementations,\n  runAllTests,\n}; ","usedDeprecatedRules":[{"ruleId":"max-len","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"/Users/devang/Documents/local_rabbit/server/src/utils/performance.js","messages":[],"suppressedMessages":[{"ruleId":"no-await-in-loop","severity":2,"message":"Unexpected `await` inside a loop.","line":161,"column":26,"nodeType":"AwaitExpression","messageId":"unexpectedAwait","endLine":161,"endColumn":53,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"max-len","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]}]
